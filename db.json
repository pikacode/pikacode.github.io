{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/icon.png","path":"icon.png","modified":1,"renderable":1},{"_id":"themes/next/source/icon.psd","path":"icon.psd","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay-reward.JPG","path":"images/alipay-reward.JPG","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar1.gif","path":"images/avatar1.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat-reward.png","path":"images/wechat-reward.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"766ed0169acb2395f7becd2d6e5271198e0ab160","modified":1472715753000},{"_id":"source/CNAME","hash":"35ae06466e2005c1318f4154207290f0cab09a0a","modified":1472448761000},{"_id":"themes/next/.DS_Store","hash":"ddb6affbc60eed80cd36f6fec17e0512a3461a67","modified":1472550816000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1472524428000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1472524428000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1472524428000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1472524428000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1472524428000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1472524428000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1472524428000},{"_id":"themes/next/_config.yml","hash":"ee18a46ce79c7c42c60e4268060097d48a568d6b","modified":1472550902000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1472524428000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1472524428000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1472524428000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1472524428000},{"_id":"source/_posts/.DS_Store","hash":"52b9057e7dd18db2549fc9413fcd5fc90bd54d09","modified":1472724667000},{"_id":"source/_posts/1.HBuilder 第三方插件开发.md","hash":"aa4ed72984e21f0d8e3d049da12d93486dcc4bb4","modified":1472545280000},{"_id":"source/_posts/2.1行命令集成极光推送.md","hash":"1107bd17af1bb341e6b9f310508705458a4ec0d4","modified":1472545155000},{"_id":"source/_posts/3.玩转 iOS 10 推送 —— UserNotifications Framework（上）.md","hash":"c22f357b7988687bef5095a5c9c15b96c9976f0f","modified":1472545293000},{"_id":"source/_posts/4.实现 iOS 前台时的推送弹窗效果.md","hash":"3c1959f8647e1e1a8f5c652fa9d8b26024f0458d","modified":1472545300000},{"_id":"source/_posts/5.iOS 推送全解析，你不得不知的所有 Tips！.md","hash":"dc6904218e86a022f3dd35365b0bb91ac219480b","modified":1472716350000},{"_id":"source/categories/.DS_Store","hash":"2328f4a4c8b07afff5f14c98222b1b072ab15e9a","modified":1472545028000},{"_id":"source/categories/index.md","hash":"0a811d675bccf8c526d79b56def89fb2539d725b","modified":1472545131000},{"_id":"source/me/.DS_Store","hash":"b72281a24317a2efb14c8a48dca2e102d20b80c3","modified":1472675823000},{"_id":"source/me/index.md","hash":"58baef73b45988cc45e192360c6d64fbe1dfc460","modified":1472608232000},{"_id":"source/tags/.DS_Store","hash":"ba8688d92dca8c9a0393ab625c6b805644daaf9a","modified":1472675823000},{"_id":"source/tags/index.md","hash":"7683338cc2ce5b26df4fa040eb9da58442f303ed","modified":1472535960000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1472524428000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1472524428000},{"_id":"themes/next/languages/.DS_Store","hash":"3984a344e548774157b343b8a8561d0290c27591","modified":1472544777000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1472524428000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1472524428000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1472524428000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1472524428000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1472524428000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1472524428000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1472524428000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1472524428000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1472524428000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1472524428000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"5286dce5c694dfd4638996af8e6dd34a7d705933","modified":1472544942000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1472524428000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1472524428000},{"_id":"themes/next/layout/.DS_Store","hash":"c3a3038c8adc4ac00606bd09e152fa908e1a7f3c","modified":1472550551000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1472524428000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1472524428000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1472524428000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1472524428000},{"_id":"themes/next/layout/page.swig","hash":"b2576ab50bdbe16f8a04e6ee69b44438f42136d7","modified":1472539887000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1472524428000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1472524428000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1472524428000},{"_id":"themes/next/source/.DS_Store","hash":"f8d06506320f847974f8b373aa963523336e4d75","modified":1472540690000},{"_id":"themes/next/source/icon.png","hash":"2fac8db85fe8317f546df4b1975f05e72c540dcf","modified":1472540798000},{"_id":"themes/next/source/icon.psd","hash":"08e9acd2e46f972de72d37eadba9ea712e0a9a8f","modified":1472540789000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1472524428000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1472524428000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1472524428000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472524428000},{"_id":"themes/next/layout/_macro/.DS_Store","hash":"db984fd0363bc733c97e5e64a0cdf5ba052800fe","modified":1472542506000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1472524428000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1472524428000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"927275bddcdb7e78d26bbfaf8581dc5e6b3fa28a","modified":1472534985000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1472524428000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1472524428000},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"f84fc2c251679e2ceb90d1161c2995f8ecaedc20","modified":1472549521000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1472524428000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1472524428000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1472549474000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1472524428000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1472524428000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1472524428000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1472524428000},{"_id":"themes/next/layout/_scripts/.DS_Store","hash":"cac26883ed17f279b704d54e5686e492a206f7cd","modified":1472546093000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1472524428000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1472524428000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1472524428000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1472524428000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1472524428000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1472524428000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1472524428000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1472524428000},{"_id":"themes/next/source/images/.DS_Store","hash":"34824d7b1e6ec27b6ddb3c984ad2c7dd0436e3b8","modified":1472540056000},{"_id":"themes/next/source/images/alipay-reward.JPG","hash":"0e954657f8426e39c5afdbd14fe92ac826b2ea47","modified":1472534897000},{"_id":"themes/next/source/images/avatar1.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1472524428000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1472524428000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1472524428000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1472524428000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1472524428000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1472524428000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1472524428000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1472524428000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472524428000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472524428000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1472524428000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1472524428000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1472524428000},{"_id":"themes/next/source/images/wechat-reward.png","hash":"947b355550d3a2a0dbbb37cc4089244d9be580ca","modified":1472536113000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472524428000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472524428000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472524428000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472524428000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472524428000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472524428000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472524428000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1472524428000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1472524428000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1472524428000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1472524428000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1472524428000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1472524428000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1472524428000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1472524428000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1472524428000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1472524428000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1472524428000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1472524428000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1472524428000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1472524428000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1472524428000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1472524428000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1472524428000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1472524428000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1472524428000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1472524428000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1472524428000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1472524428000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1472524428000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1472524428000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1472524428000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1472524428000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1472524428000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1472524428000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1472524428000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1472524428000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1472524428000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1472524428000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1472524428000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1472524428000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1472524428000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1472524428000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1472524428000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1472524428000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1472524428000},{"_id":"themes/next/source/images/avatar.gif","hash":"572db4152365bf9175a9b0bf7f826c2943dccb2d","modified":1470709532000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1472524428000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1472524428000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1472524428000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1472524428000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1472524428000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1472524428000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1472524428000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1472524428000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1472524428000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1472524428000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1472524428000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1472524428000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1472524428000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1472550794000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1472524428000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1472524428000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1472524428000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1472524428000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1472524428000},{"_id":"public/categories/index.html","hash":"0d3f83cedb0ded8282041bc449f9074f60b50d52","modified":1472725218885},{"_id":"public/me/index.html","hash":"96e2cd6a2fd721c513c87bb65ce320acb030177c","modified":1472725218885},{"_id":"public/tags/index.html","hash":"fdaa85ebcd32c3b64bb079a7e6396bc019348b90","modified":1472725218885},{"_id":"public/archives/index.html","hash":"bc312aaefdb516ab5ad701d49cff20ecb5fddbdf","modified":1472725218886},{"_id":"public/archives/2016/index.html","hash":"638ab502a150b18dca894ed3e1087a7b7f32be6d","modified":1472725218886},{"_id":"public/archives/2016/04/index.html","hash":"ead095f554c6073344d6c38aec090771d672dcf9","modified":1472725218886},{"_id":"public/archives/2016/05/index.html","hash":"be486ba1d11f3efc390f2bd72793eca047e6bf8c","modified":1472725218886},{"_id":"public/archives/2016/06/index.html","hash":"98656ab6b13d3a78923ebfd5f7015a2a4bfded63","modified":1472725218886},{"_id":"public/archives/2016/08/index.html","hash":"acb0c9ec7f2bbc39ed7cb4c52a38bf08ac532ae3","modified":1472725218886},{"_id":"public/archives/2016/07/index.html","hash":"ee4062b94fa29aa85ef06aa18ea733fe7daca1db","modified":1472725218886},{"_id":"public/categories/HBuilder/index.html","hash":"3d1b32b73bae04027462b74fd6f0941f13c02419","modified":1472725218887},{"_id":"public/categories/JPush/index.html","hash":"9919a02182dc1d03992dcfadaf054faf8973f716","modified":1472725218887},{"_id":"public/categories/Push-Notification/index.html","hash":"bae8bc283ed32fed0a0bcf85f4164d6abbb41e91","modified":1472725218887},{"_id":"public/categories/HBuilder/JPush/index.html","hash":"443d536a0f6409686301d1c3bc7aa1b9d1532ea6","modified":1472725218887},{"_id":"public/categories/JPush/Push-Notification/index.html","hash":"a8b84dc216a1807db85e8ebc173c98fa49ca6d47","modified":1472725218887},{"_id":"public/categories/Push-Notification/iOS-10/index.html","hash":"b15d27cecd5c3216d35d41331d19767864632071","modified":1472725218887},{"_id":"public/categories/HBuilder/JPush/Push-Notification/index.html","hash":"469844ae47ab5ea4852ddb6a40ac20f87ded5527","modified":1472725218887},{"_id":"public/tags/HBuilder/index.html","hash":"061716d9ffd9a614b082e95cbc5acf6b52465601","modified":1472725218887},{"_id":"public/tags/JPush/index.html","hash":"96d4a420e71c4c05c510024182883b08c69ce564","modified":1472725218887},{"_id":"public/tags/Push-Notification/index.html","hash":"387af1423f0043858cb8f1cc71bd2de03acf0a20","modified":1472725218887},{"_id":"public/tags/iOS-10/index.html","hash":"b9550b095c0dfe3454405b2596ecc271f27485ff","modified":1472725218888},{"_id":"public/2016/08/31/5.iOS 推送全解析，你不得不知的所有 Tips！/index.html","hash":"4293995e2c623d3571b511b2c95c779129c886d6","modified":1472725218888},{"_id":"public/2016/07/25/4.实现 iOS 前台时的推送弹窗效果/index.html","hash":"b165ab938c26764bbb1a39ba90d3c13d1bf94b27","modified":1472725218888},{"_id":"public/2016/06/30/3.玩转 iOS 10 推送 —— UserNotifications Framework（上）/index.html","hash":"2b226d038303b00053ac7df16b5d8d3397461659","modified":1472725218888},{"_id":"public/2016/05/31/2.1行命令集成极光推送/index.html","hash":"925ad2e30ef5ce92b3e8b4c3429e5c3adb1ef153","modified":1472725218888},{"_id":"public/2016/04/21/1.HBuilder 第三方插件开发/index.html","hash":"1448698e1a0ab8da2834baf855d9ba7f602b76fb","modified":1472725218888},{"_id":"public/index.html","hash":"b71927ca0f4364c5ef564aa5315435d82d9b98e8","modified":1472725218888},{"_id":"public/CNAME","hash":"35ae06466e2005c1318f4154207290f0cab09a0a","modified":1472725218903},{"_id":"public/icon.png","hash":"2fac8db85fe8317f546df4b1975f05e72c540dcf","modified":1472725218903},{"_id":"public/icon.psd","hash":"08e9acd2e46f972de72d37eadba9ea712e0a9a8f","modified":1472725218903},{"_id":"public/images/alipay-reward.JPG","hash":"0e954657f8426e39c5afdbd14fe92ac826b2ea47","modified":1472725218903},{"_id":"public/images/avatar1.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1472725218903},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1472725218903},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1472725218904},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1472725218904},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1472725218904},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1472725218904},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1472725218904},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1472725218904},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472725218904},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472725218904},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1472725218904},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1472725218904},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1472725218904},{"_id":"public/images/wechat-reward.png","hash":"947b355550d3a2a0dbbb37cc4089244d9be580ca","modified":1472725218904},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1472725218904},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1472725218904},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1472725218904},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1472725218905},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1472725218905},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1472725218905},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1472725218905},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1472725218905},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1472725218905},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1472725218905},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1472725218905},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1472725219779},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1472725219784},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1472725219784},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1472725219791},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1472725219791},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1472725219791},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1472725219791},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1472725219791},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1472725219791},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1472725219791},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1472725219791},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1472725219791},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1472725219791},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1472725219792},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1472725219792},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1472725219792},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1472725219792},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1472725219792},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1472725219792},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1472725219792},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1472725219792},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1472725219792},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1472725219792},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1472725219792},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1472725219792},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1472725219792},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1472725219792},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1472725219792},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1472725219792},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1472725219793},{"_id":"public/css/main.css","hash":"ad4c172887aade58f7365fc16430993c04730bde","modified":1472725219793},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1472725219793},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1472725219793},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1472725219793},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1472725219793},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1472725219793},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1472725219793},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1472725219793},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1472725219793},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1472725219793},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1472725219793},{"_id":"public/images/avatar.gif","hash":"572db4152365bf9175a9b0bf7f826c2943dccb2d","modified":1472725219803},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1472725219816}],"Category":[{"name":"HBuilder","_id":"cisk6ki7o0005sbbdbg73hn16"},{"name":"JPush","_id":"cisk6ki7y000asbbdl0gltzq9"},{"name":"Push Notification","_id":"cisk6ki82000csbbdpczdal21"},{"name":"JPush","parent":"cisk6ki7o0005sbbdbg73hn16","_id":"cisk6ki86000isbbd18vnffgs"},{"name":"Push Notification","parent":"cisk6ki7y000asbbdl0gltzq9","_id":"cisk6ki88000qsbbd1wyfa9uc"},{"name":"iOS 10","parent":"cisk6ki82000csbbdpczdal21","_id":"cisk6ki89000tsbbdv3bfy9t4"},{"name":"Push Notification","parent":"cisk6ki86000isbbd18vnffgs","_id":"cisk6ki8b000ysbbdeu8qf26x"}],"Data":[],"Page":[{"title":"categories","date":"2016-08-30T08:16:48.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-30 16:16:48\ntype: categories\ncomments: false\n---\n","updated":"2016-08-30T08:18:51.000Z","path":"categories/index.html","layout":"page","_id":"cisk6ki7b0001sbbd7hrcw8tb","content":"","excerpt":"","more":""},{"title":"me","date":"2016-08-30T05:53:17.000Z","type":"about","_content":"##### 浪子侠名：wxɔ\n\n##### 江湖履历：\n\n- 重庆\n  - 2008.09-2013.07      就读重庆大学五年制本科，获建筑学学士\n- 北京\n  - 2013.07-2014.04      北京莫克建筑设计，助理建筑师\n  - 2014.04-2015.02      澳大利亚 Peddle Thorp 建筑事务所北京分公司，助理建筑师\n- 广州\n  - 2015.05-2015.10      蓝鸥， iOS 开发学员\n- 深圳\n  - 2015.10-2016.01      深圳华南城集团华盛商业，iOS 开发工程师\n  - 2016.02-2016.08      深圳和讯华谷极光推送，iOS 开源工程师\n- ......\n\n##### 飞鸽传书：\n\n- qq：<a target=\"_blank\" href=\"http://sighttp.qq.com/authd?IDKEY=0d126f9c6d58e68a8b1b0d0fc05c5c52fd69f257b4a81e37\">pikacode@qq.com</a>\n- e-mail：<a href=\"mailto:pikacode@qq.com\">pikacode@qq.com</a>\n- github：[https://github.com/pikacode](https://github.com/pikacode)\n\n\n\n","source":"me/index.md","raw":"---\ntitle: me\ndate: 2016-08-30 13:53:17\ntype: \"about\"\n---\n##### 浪子侠名：wxɔ\n\n##### 江湖履历：\n\n- 重庆\n  - 2008.09-2013.07      就读重庆大学五年制本科，获建筑学学士\n- 北京\n  - 2013.07-2014.04      北京莫克建筑设计，助理建筑师\n  - 2014.04-2015.02      澳大利亚 Peddle Thorp 建筑事务所北京分公司，助理建筑师\n- 广州\n  - 2015.05-2015.10      蓝鸥， iOS 开发学员\n- 深圳\n  - 2015.10-2016.01      深圳华南城集团华盛商业，iOS 开发工程师\n  - 2016.02-2016.08      深圳和讯华谷极光推送，iOS 开源工程师\n- ......\n\n##### 飞鸽传书：\n\n- qq：<a target=\"_blank\" href=\"http://sighttp.qq.com/authd?IDKEY=0d126f9c6d58e68a8b1b0d0fc05c5c52fd69f257b4a81e37\">pikacode@qq.com</a>\n- e-mail：<a href=\"mailto:pikacode@qq.com\">pikacode@qq.com</a>\n- github：[https://github.com/pikacode](https://github.com/pikacode)\n\n\n\n","updated":"2016-08-31T01:50:32.000Z","path":"me/index.html","comments":1,"layout":"page","_id":"cisk6ki7i0003sbbdr6twnm3c","content":"<h5 id=\"浪子侠名：wxo\"><a href=\"#浪子侠名：wxo\" class=\"headerlink\" title=\"浪子侠名：wxɔ\"></a>浪子侠名：wxɔ</h5><h5 id=\"江湖履历：\"><a href=\"#江湖履历：\" class=\"headerlink\" title=\"江湖履历：\"></a>江湖履历：</h5><ul>\n<li>重庆<ul>\n<li>2008.09-2013.07      就读重庆大学五年制本科，获建筑学学士</li>\n</ul>\n</li>\n<li>北京<ul>\n<li>2013.07-2014.04      北京莫克建筑设计，助理建筑师</li>\n<li>2014.04-2015.02      澳大利亚 Peddle Thorp 建筑事务所北京分公司，助理建筑师</li>\n</ul>\n</li>\n<li>广州<ul>\n<li>2015.05-2015.10      蓝鸥， iOS 开发学员</li>\n</ul>\n</li>\n<li>深圳<ul>\n<li>2015.10-2016.01      深圳华南城集团华盛商业，iOS 开发工程师</li>\n<li>2016.02-2016.08      深圳和讯华谷极光推送，iOS 开源工程师</li>\n</ul>\n</li>\n<li>……</li>\n</ul>\n<h5 id=\"飞鸽传书：\"><a href=\"#飞鸽传书：\" class=\"headerlink\" title=\"飞鸽传书：\"></a>飞鸽传书：</h5><ul>\n<li>qq：<a target=\"_blank\" href=\"http://sighttp.qq.com/authd?IDKEY=0d126f9c6d58e68a8b1b0d0fc05c5c52fd69f257b4a81e37\">pikacode@qq.com</a></li>\n<li>e-mail：<a href=\"mailto:pikacode@qq.com\" target=\"_blank\" rel=\"external\">pikacode@qq.com</a></li>\n<li>github：<a href=\"https://github.com/pikacode\" target=\"_blank\" rel=\"external\">https://github.com/pikacode</a></li>\n</ul>\n","excerpt":"","more":"<h5 id=\"浪子侠名：wxo\"><a href=\"#浪子侠名：wxo\" class=\"headerlink\" title=\"浪子侠名：wxɔ\"></a>浪子侠名：wxɔ</h5><h5 id=\"江湖履历：\"><a href=\"#江湖履历：\" class=\"headerlink\" title=\"江湖履历：\"></a>江湖履历：</h5><ul>\n<li>重庆<ul>\n<li>2008.09-2013.07      就读重庆大学五年制本科，获建筑学学士</li>\n</ul>\n</li>\n<li>北京<ul>\n<li>2013.07-2014.04      北京莫克建筑设计，助理建筑师</li>\n<li>2014.04-2015.02      澳大利亚 Peddle Thorp 建筑事务所北京分公司，助理建筑师</li>\n</ul>\n</li>\n<li>广州<ul>\n<li>2015.05-2015.10      蓝鸥， iOS 开发学员</li>\n</ul>\n</li>\n<li>深圳<ul>\n<li>2015.10-2016.01      深圳华南城集团华盛商业，iOS 开发工程师</li>\n<li>2016.02-2016.08      深圳和讯华谷极光推送，iOS 开源工程师</li>\n</ul>\n</li>\n<li>……</li>\n</ul>\n<h5 id=\"飞鸽传书：\"><a href=\"#飞鸽传书：\" class=\"headerlink\" title=\"飞鸽传书：\"></a>飞鸽传书：</h5><ul>\n<li>qq：<a target=\"_blank\" href=\"http://sighttp.qq.com/authd?IDKEY=0d126f9c6d58e68a8b1b0d0fc05c5c52fd69f257b4a81e37\">pikacode@qq.com</a></li>\n<li>e-mail：<a href=\"mailto:pikacode@qq.com\">pikacode@qq.com</a></li>\n<li>github：<a href=\"https://github.com/pikacode\">https://github.com/pikacode</a></li>\n</ul>\n"},{"title":"tags","date":"2016-08-30T05:44:25.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-30 13:44:25\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-08-30T05:46:00.000Z","path":"tags/index.html","layout":"page","_id":"cisk6kicn0017sbbd1zlr17gy","content":"","excerpt":"","more":""}],"Post":[{"title":"HBuilder 第三方插件开发","date":"2016-04-21T08:10:55.000Z","_content":"本人最近开发了 HBulider 集成极光推送(JPush)的插件，**鉴于 HBuilder 官网上缺少 iOS 的示例** ，而且官网也只给出了 JavaScript 调用 native 代码的接口，对于 native 调用 JavaScript 并且向 JavaScript 发送 event 事件的方法却在 native层 进行了封装。笔者在踩过了一些小坑之后，终于成功的开发了插件，并且 **实现了 JavaScript 和 native 的双向沟通** 。特此跟大家分享一下在 HBuilder 插件开发过程中的经验和关键代码。\n\n\n## JPush 实例展示\n首先附上完整 demo [[JPush HBuilder Demo]](https://github.com/jpush/jpush-hbuilder-demo) 并为大家展示一下：\n\n![实例及功能展示](http://upload-images.jianshu.io/upload_images/1944178-cbeb0ed0f747e50c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n以上即为根据本文内容开发出的实例\n\n如您需使用极光推送产品请至此 [[极光推送官方网站]](https://www.jpush.cno)\n\n## 新插件配置\n##### 配置 manifest.json\n首先用源码的方式打开工程 /Pandora/ 目录下的 manifest.json ，在 \"permissions\" 中添加新的插件名称：\n​\t\n```json\n \"permissions\": {\n\t\"Push\":{\n\t\t\"description\": \"极光推送插件\"\n\t}\n},\n```\n\n##### 配置 feature.plist\n在 Xcode 中打开 /PandoraApi.bundle/ 目录下的 feature.plist ，为插件添加新的 item：\n\n![feature.plist](http://upload-images.jianshu.io/upload_images/1944178-93398821b63f61e9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中需要注意的是：\n\n- 最顶部的 key 值 Push ，必须跟 manifest.json 中配置的插件名一致\n- class 的值需要跟 native 代码中的类名一致，此处为 JPushPlugin\n- 因为本插件拓展自 HBuilder 已经封装好的 PGPush ，故 baseclass 为父类\n\n通过以上配置，就可以在 JavaScript 中通过 Push --> JPushPlugin 的对应关系，调用 native 代码了。\n\n\n## JavaScript 调用本地代码的实现\n这部分在  [[HBuilder 官网插件开发指导]](http://ask.dcloud.net.cn/docs/#http://ask.dcloud.net.cn/article/67) 中已经给出了较详细的说明，这里就不再赘述，附上关键代码：\n\n```javascript\ndocument.addEventListener(\"plusready\", function() {\n\tvar _BARCODE = 'Push';\t// 插件名称\n\tvar B = window.plus.bridge;\n    \n\tvar JPushPlugin = {\n\n\t\tcallNative : function(fname, args, successCallback) {\n\t\t\tvar callbackId = this.getCallbackId(successCallback, this.errorCallback);\n\t\t\tif (args != null) {\n\t\t\t\targs.unshift(callbackId);\n\t\t\t} else {\n\t\t\t\tvar args = [callbackId];\n\t\t\t}\n\t\t\treturn B.exec(_BARCODE, fname, args);\n\t\t},\n\t\t\n\t\tgetCallbackId : function(successCallback) {\n\t\t\tvar success = typeof successCallback !== 'function' ? null : function(args) \n\t\t\t{\n\t\t\t\tsuccessCallback(args);\n\t\t\t};\n\t\t\tcallbackId = B.callbackId(success, this.errorCallback);\n\t\t\treturn callbackId;\n\t\t},\n\t\t\n\t\terrorCallback : function(errorMsg) {\n\t\t\tconsole.log(\"Javascript callback error: \" + errorMsg);\n\t\t},\n\t\t\t\n\t\tjsHello : function(args){\n\t\t\tthis.callNative(\"nativeHello\", args, null);\n\t\t},\n\t\t\n    window.plus.Push = JPushPlugin;\n    \n}, true);\n```\n其中 callNative 为封装好用于调用 native 代码的方法，参数如下：\n\n- fname：要调用的 native 的方法名\n- args：传给 native 的参数，必须是数组\n- successCallback:成功回调，null 为没有\n\n以上代码最后面的 \"jsHello\" 方法，即为封装好的 js 方法，在工程的其他文件里通过 \n\n```javascript\nwindow.plus.Push.jsHello(args);\n```\n\n的方式即可调用本地的 \"nativeHello\" 方法。\n\n## Objective-C 调用 js 的实现\n#### 与 Phonegap 的差异\n\n在 HBuilder 官方文档中并没有提及 OC 调用 js 的方法，从 OC 中的类名（PGPlugin 等）可以看出，其应该是对 Phonegap 的封装，但是却并没有提供 Phonegap 中直接调用 js 的接口，例如：\n\n\n```objc\nNSString *evalString = [NSString stringWithFormat:@\"jsFunction(%@)\",args];\n[self.commandDelegate evalJs:evalString];\n```\n也无法向 js 发送 event ，例如：\n\n```objc\nNSString *evalString = [NSString stringWithFormat:@\"cordova.fireDocumentEvent('event_name',%@)\",args];\n[self.commandDelegate evalJs:evalString];\n```\n其中 self 为继承自 CDVPlugin 的插件类实例。\n\n经过笔者的查找，发现在 HBuilder 提供的 PDRCoreAppFrame（：PDRNView ：UIView） 类中，有如下方法可以调用 js 代码：\n\n```objc\n/**\n @brief 在当前页面同步执行Javascript\n @param js javasrcipt 脚本\n @return NSString* 执行结果\n */\n- (NSString*)stringByEvaluatingJavaScriptFromString:(NSString*)js;\n```\n\n#### 获取 PDRCoreAppFrame 对象\n\n其中 PDRCoreAppFrame 为控制 webView 的实例，数量可能为多个，且在视图层级中的位置不确定，故需要通过遍历 app 中所有 view ，来找出 PDRCoreAppFrame ，以下是通过 **递归** 找出所有 PDRCoreAppFrame 的方法：\n\n```objc\n-(NSMutableArray*)searchViews:(NSArray*)views{\n    NSMutableArray *frames = [NSMutableArray array];\n    for (UIView *temp in views) {\n        if ([temp isMemberOfClass:[PDRCoreAppFrame class]]) {\n            [frames addObject:temp];\n        }\n        if ([temp subviews]) {\n            NSMutableArray *tempArray = [self searchViews:[temp subviews]];\n            for (UIView *tempView in tempArray) {\n                if ([tempView isMemberOfClass:[PDRCoreAppFrame class]]) {\n                    [frames addObject:tempView];\n                }\n            }\n        }\n    }\n    return frames;\n}\n```\n\n其中：\n\n- 参数 views 为同一层级中的 views\n- 返回值 frames 为从该层级中找到的 PDRCoreAppFrame\n\n\n#### 调用 js\n\n这样我们就可以用上述方法获取到所有的 PDRCoreAppFrame 进而调用 js 代码了：\n\n```objc\n-(void)evaluatingJavaScriptFromString:(NSString*)string{\n    UIWindow *window = [[UIApplication sharedApplication] keyWindow];\n    NSArray *views = [[[window rootViewController] view] subviews];\n    //调用上述方法\n    NSArray *frames = [self searchViews:views];\n    for (PDRCoreAppFrame *appFrame in frames) {\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [appFrame stringByEvaluatingJavaScriptFromString:string];\n        });\n    }\n}\n```\n调用示例：\n\n```objc\nNSString *evalString = @\"alert(\"make a js call\");\";\n[self evaluatingJavaScriptFromString:evalString];\n```\n\n**但是并不建议用这种方式**，因为该方法会强制向每个 webView 的页面都发送一条执行语句，有时会出现并不希望的结果。因此，**建议使用下面发送 event 的方式**，并在 js 中接收后进行处理。</p>\n\n#### 向 js 发送 event\n\n笔者对上述方法再次进行了封装：\n\n```objc\n-(void)fireEvent:(NSString*)event args:(id)args{\n    NSString *evalString = nil;\n    NSError  *error      = nil;\n    NSString *argsString = nil;\n\n    if (args) {\n        if ([args isKindOfClass:[NSString class]]) {\n            argsString = args;\n        }else{\n            NSData   *jsonData   = [NSJSONSerialization dataWithJSONObject:args options:0 error:&error];\n            argsString = [[NSString alloc]initWithData:jsonData encoding:NSUTF8StringEncoding];\n            if (error) {\n                NSLog(@\"%@\",error);\n            }\n        }\n        evalString = [NSString stringWithFormat:@\"\\\n                      var jpushEvent = document.createEvent('HTMLEvents');\\\n                      jpushEvent.initEvent('%@', true, true);\\\n                      jpushEvent.eventType = 'message';\\\n                      jpushEvent.arguments = '%@';\\\n                      document.dispatchEvent(jpushEvent);\",event,argsString];\n    }else{\n        evalString = [NSString stringWithFormat:@\"\\\n                      var jpushEvent = document.createEvent('HTMLEvents');\\\n                      jpushEvent.initEvent('%@', true, true);\\\n                      jpushEvent.eventType = 'message';\\\n                      document.dispatchEvent(jpushEvent);\",event];\n    }\n    //调用上述方法\n    [self evaluatingJavaScriptFromString:evalString];\n}\n```\n其中对传入的 args 进行了简单的处理。\n\n**最后我们通过调用一行代码即可做到向 js 发送 event ：**\n\n\n```objc\n[self fireEvent:@\"event_name\" args:args];\n```\n\n#### js 接收 event 并处理\n\n在上一步中发送了 \"event_name\" 的事件之后，可以在 html 的 script 中通过以下方式捕获：\n\n```javascript\ndocument.addEventListener(\"event_name\", onEventFunc, false);\nfunction onEventFunc(args){\n\tvar obj = JSON.parese(args);\n\twindow.setTimeout(function(){\n\t\talert(obj);\n\t},0);\n}\n```\n\n**至此，就彻底实现了 Objective-C 向 js 的沟通**\n\n### * 如您对本文有任何疑问或建议，欢迎交流","source":"_posts/1.HBuilder 第三方插件开发.md","raw":"---\ntitle: HBuilder 第三方插件开发\ndate: 2016-04-21 16:10:55\ncategories:\n\t- HBuilder\n\t- JPush\n\t- Push Notification\ntags:\n\t- HBuilder\n\t- JPush\n\t- Push Notification\n---\n本人最近开发了 HBulider 集成极光推送(JPush)的插件，**鉴于 HBuilder 官网上缺少 iOS 的示例** ，而且官网也只给出了 JavaScript 调用 native 代码的接口，对于 native 调用 JavaScript 并且向 JavaScript 发送 event 事件的方法却在 native层 进行了封装。笔者在踩过了一些小坑之后，终于成功的开发了插件，并且 **实现了 JavaScript 和 native 的双向沟通** 。特此跟大家分享一下在 HBuilder 插件开发过程中的经验和关键代码。\n\n\n## JPush 实例展示\n首先附上完整 demo [[JPush HBuilder Demo]](https://github.com/jpush/jpush-hbuilder-demo) 并为大家展示一下：\n\n![实例及功能展示](http://upload-images.jianshu.io/upload_images/1944178-cbeb0ed0f747e50c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n以上即为根据本文内容开发出的实例\n\n如您需使用极光推送产品请至此 [[极光推送官方网站]](https://www.jpush.cno)\n\n## 新插件配置\n##### 配置 manifest.json\n首先用源码的方式打开工程 /Pandora/ 目录下的 manifest.json ，在 \"permissions\" 中添加新的插件名称：\n​\t\n```json\n \"permissions\": {\n\t\"Push\":{\n\t\t\"description\": \"极光推送插件\"\n\t}\n},\n```\n\n##### 配置 feature.plist\n在 Xcode 中打开 /PandoraApi.bundle/ 目录下的 feature.plist ，为插件添加新的 item：\n\n![feature.plist](http://upload-images.jianshu.io/upload_images/1944178-93398821b63f61e9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中需要注意的是：\n\n- 最顶部的 key 值 Push ，必须跟 manifest.json 中配置的插件名一致\n- class 的值需要跟 native 代码中的类名一致，此处为 JPushPlugin\n- 因为本插件拓展自 HBuilder 已经封装好的 PGPush ，故 baseclass 为父类\n\n通过以上配置，就可以在 JavaScript 中通过 Push --> JPushPlugin 的对应关系，调用 native 代码了。\n\n\n## JavaScript 调用本地代码的实现\n这部分在  [[HBuilder 官网插件开发指导]](http://ask.dcloud.net.cn/docs/#http://ask.dcloud.net.cn/article/67) 中已经给出了较详细的说明，这里就不再赘述，附上关键代码：\n\n```javascript\ndocument.addEventListener(\"plusready\", function() {\n\tvar _BARCODE = 'Push';\t// 插件名称\n\tvar B = window.plus.bridge;\n    \n\tvar JPushPlugin = {\n\n\t\tcallNative : function(fname, args, successCallback) {\n\t\t\tvar callbackId = this.getCallbackId(successCallback, this.errorCallback);\n\t\t\tif (args != null) {\n\t\t\t\targs.unshift(callbackId);\n\t\t\t} else {\n\t\t\t\tvar args = [callbackId];\n\t\t\t}\n\t\t\treturn B.exec(_BARCODE, fname, args);\n\t\t},\n\t\t\n\t\tgetCallbackId : function(successCallback) {\n\t\t\tvar success = typeof successCallback !== 'function' ? null : function(args) \n\t\t\t{\n\t\t\t\tsuccessCallback(args);\n\t\t\t};\n\t\t\tcallbackId = B.callbackId(success, this.errorCallback);\n\t\t\treturn callbackId;\n\t\t},\n\t\t\n\t\terrorCallback : function(errorMsg) {\n\t\t\tconsole.log(\"Javascript callback error: \" + errorMsg);\n\t\t},\n\t\t\t\n\t\tjsHello : function(args){\n\t\t\tthis.callNative(\"nativeHello\", args, null);\n\t\t},\n\t\t\n    window.plus.Push = JPushPlugin;\n    \n}, true);\n```\n其中 callNative 为封装好用于调用 native 代码的方法，参数如下：\n\n- fname：要调用的 native 的方法名\n- args：传给 native 的参数，必须是数组\n- successCallback:成功回调，null 为没有\n\n以上代码最后面的 \"jsHello\" 方法，即为封装好的 js 方法，在工程的其他文件里通过 \n\n```javascript\nwindow.plus.Push.jsHello(args);\n```\n\n的方式即可调用本地的 \"nativeHello\" 方法。\n\n## Objective-C 调用 js 的实现\n#### 与 Phonegap 的差异\n\n在 HBuilder 官方文档中并没有提及 OC 调用 js 的方法，从 OC 中的类名（PGPlugin 等）可以看出，其应该是对 Phonegap 的封装，但是却并没有提供 Phonegap 中直接调用 js 的接口，例如：\n\n\n```objc\nNSString *evalString = [NSString stringWithFormat:@\"jsFunction(%@)\",args];\n[self.commandDelegate evalJs:evalString];\n```\n也无法向 js 发送 event ，例如：\n\n```objc\nNSString *evalString = [NSString stringWithFormat:@\"cordova.fireDocumentEvent('event_name',%@)\",args];\n[self.commandDelegate evalJs:evalString];\n```\n其中 self 为继承自 CDVPlugin 的插件类实例。\n\n经过笔者的查找，发现在 HBuilder 提供的 PDRCoreAppFrame（：PDRNView ：UIView） 类中，有如下方法可以调用 js 代码：\n\n```objc\n/**\n @brief 在当前页面同步执行Javascript\n @param js javasrcipt 脚本\n @return NSString* 执行结果\n */\n- (NSString*)stringByEvaluatingJavaScriptFromString:(NSString*)js;\n```\n\n#### 获取 PDRCoreAppFrame 对象\n\n其中 PDRCoreAppFrame 为控制 webView 的实例，数量可能为多个，且在视图层级中的位置不确定，故需要通过遍历 app 中所有 view ，来找出 PDRCoreAppFrame ，以下是通过 **递归** 找出所有 PDRCoreAppFrame 的方法：\n\n```objc\n-(NSMutableArray*)searchViews:(NSArray*)views{\n    NSMutableArray *frames = [NSMutableArray array];\n    for (UIView *temp in views) {\n        if ([temp isMemberOfClass:[PDRCoreAppFrame class]]) {\n            [frames addObject:temp];\n        }\n        if ([temp subviews]) {\n            NSMutableArray *tempArray = [self searchViews:[temp subviews]];\n            for (UIView *tempView in tempArray) {\n                if ([tempView isMemberOfClass:[PDRCoreAppFrame class]]) {\n                    [frames addObject:tempView];\n                }\n            }\n        }\n    }\n    return frames;\n}\n```\n\n其中：\n\n- 参数 views 为同一层级中的 views\n- 返回值 frames 为从该层级中找到的 PDRCoreAppFrame\n\n\n#### 调用 js\n\n这样我们就可以用上述方法获取到所有的 PDRCoreAppFrame 进而调用 js 代码了：\n\n```objc\n-(void)evaluatingJavaScriptFromString:(NSString*)string{\n    UIWindow *window = [[UIApplication sharedApplication] keyWindow];\n    NSArray *views = [[[window rootViewController] view] subviews];\n    //调用上述方法\n    NSArray *frames = [self searchViews:views];\n    for (PDRCoreAppFrame *appFrame in frames) {\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [appFrame stringByEvaluatingJavaScriptFromString:string];\n        });\n    }\n}\n```\n调用示例：\n\n```objc\nNSString *evalString = @\"alert(\"make a js call\");\";\n[self evaluatingJavaScriptFromString:evalString];\n```\n\n**但是并不建议用这种方式**，因为该方法会强制向每个 webView 的页面都发送一条执行语句，有时会出现并不希望的结果。因此，**建议使用下面发送 event 的方式**，并在 js 中接收后进行处理。</p>\n\n#### 向 js 发送 event\n\n笔者对上述方法再次进行了封装：\n\n```objc\n-(void)fireEvent:(NSString*)event args:(id)args{\n    NSString *evalString = nil;\n    NSError  *error      = nil;\n    NSString *argsString = nil;\n\n    if (args) {\n        if ([args isKindOfClass:[NSString class]]) {\n            argsString = args;\n        }else{\n            NSData   *jsonData   = [NSJSONSerialization dataWithJSONObject:args options:0 error:&error];\n            argsString = [[NSString alloc]initWithData:jsonData encoding:NSUTF8StringEncoding];\n            if (error) {\n                NSLog(@\"%@\",error);\n            }\n        }\n        evalString = [NSString stringWithFormat:@\"\\\n                      var jpushEvent = document.createEvent('HTMLEvents');\\\n                      jpushEvent.initEvent('%@', true, true);\\\n                      jpushEvent.eventType = 'message';\\\n                      jpushEvent.arguments = '%@';\\\n                      document.dispatchEvent(jpushEvent);\",event,argsString];\n    }else{\n        evalString = [NSString stringWithFormat:@\"\\\n                      var jpushEvent = document.createEvent('HTMLEvents');\\\n                      jpushEvent.initEvent('%@', true, true);\\\n                      jpushEvent.eventType = 'message';\\\n                      document.dispatchEvent(jpushEvent);\",event];\n    }\n    //调用上述方法\n    [self evaluatingJavaScriptFromString:evalString];\n}\n```\n其中对传入的 args 进行了简单的处理。\n\n**最后我们通过调用一行代码即可做到向 js 发送 event ：**\n\n\n```objc\n[self fireEvent:@\"event_name\" args:args];\n```\n\n#### js 接收 event 并处理\n\n在上一步中发送了 \"event_name\" 的事件之后，可以在 html 的 script 中通过以下方式捕获：\n\n```javascript\ndocument.addEventListener(\"event_name\", onEventFunc, false);\nfunction onEventFunc(args){\n\tvar obj = JSON.parese(args);\n\twindow.setTimeout(function(){\n\t\talert(obj);\n\t},0);\n}\n```\n\n**至此，就彻底实现了 Objective-C 向 js 的沟通**\n\n### * 如您对本文有任何疑问或建议，欢迎交流","slug":"1.HBuilder 第三方插件开发","published":1,"updated":"2016-08-30T08:21:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisk6ki750000sbbdv0t752nj","content":"<p>本人最近开发了 HBulider 集成极光推送(JPush)的插件，<strong>鉴于 HBuilder 官网上缺少 iOS 的示例</strong> ，而且官网也只给出了 JavaScript 调用 native 代码的接口，对于 native 调用 JavaScript 并且向 JavaScript 发送 event 事件的方法却在 native层 进行了封装。笔者在踩过了一些小坑之后，终于成功的开发了插件，并且 <strong>实现了 JavaScript 和 native 的双向沟通</strong> 。特此跟大家分享一下在 HBuilder 插件开发过程中的经验和关键代码。</p>\n<h2 id=\"JPush-实例展示\"><a href=\"#JPush-实例展示\" class=\"headerlink\" title=\"JPush 实例展示\"></a>JPush 实例展示</h2><p>首先附上完整 demo <a href=\"https://github.com/jpush/jpush-hbuilder-demo\" target=\"_blank\" rel=\"external\">[JPush HBuilder Demo]</a> 并为大家展示一下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-cbeb0ed0f747e50c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"实例及功能展示\"></p>\n<p>以上即为根据本文内容开发出的实例</p>\n<p>如您需使用极光推送产品请至此 <a href=\"https://www.jpush.cno\" target=\"_blank\" rel=\"external\">[极光推送官方网站]</a></p>\n<h2 id=\"新插件配置\"><a href=\"#新插件配置\" class=\"headerlink\" title=\"新插件配置\"></a>新插件配置</h2><h5 id=\"配置-manifest-json\"><a href=\"#配置-manifest-json\" class=\"headerlink\" title=\"配置 manifest.json\"></a>配置 manifest.json</h5><p>首先用源码的方式打开工程 /Pandora/ 目录下的 manifest.json ，在 “permissions” 中添加新的插件名称：<br>​<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> \"permissions\": &#123;</div><div class=\"line\">\t\"Push\":&#123;</div><div class=\"line\">\t\t\"description\": \"极光推送插件\"</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h5 id=\"配置-feature-plist\"><a href=\"#配置-feature-plist\" class=\"headerlink\" title=\"配置 feature.plist\"></a>配置 feature.plist</h5><p>在 Xcode 中打开 /PandoraApi.bundle/ 目录下的 feature.plist ，为插件添加新的 item：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-93398821b63f61e9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"feature.plist\"></p>\n<p>其中需要注意的是：</p>\n<ul>\n<li>最顶部的 key 值 Push ，必须跟 manifest.json 中配置的插件名一致</li>\n<li>class 的值需要跟 native 代码中的类名一致，此处为 JPushPlugin</li>\n<li>因为本插件拓展自 HBuilder 已经封装好的 PGPush ，故 baseclass 为父类</li>\n</ul>\n<p>通过以上配置，就可以在 JavaScript 中通过 Push –&gt; JPushPlugin 的对应关系，调用 native 代码了。</p>\n<h2 id=\"JavaScript-调用本地代码的实现\"><a href=\"#JavaScript-调用本地代码的实现\" class=\"headerlink\" title=\"JavaScript 调用本地代码的实现\"></a>JavaScript 调用本地代码的实现</h2><p>这部分在  <a href=\"http://ask.dcloud.net.cn/docs/#http://ask.dcloud.net.cn/article/67\" target=\"_blank\" rel=\"external\">[HBuilder 官网插件开发指导]</a> 中已经给出了较详细的说明，这里就不再赘述，附上关键代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"plusready\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> _BARCODE = <span class=\"string\">'Push'</span>;\t<span class=\"comment\">// 插件名称</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> B = <span class=\"built_in\">window</span>.plus.bridge;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">var</span> JPushPlugin = &#123;</div><div class=\"line\"></div><div class=\"line\">\t\tcallNative : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fname, args, successCallback</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> callbackId = <span class=\"keyword\">this</span>.getCallbackId(successCallback, <span class=\"keyword\">this</span>.errorCallback);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (args != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">\t\t\t\targs.unshift(callbackId);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> args = [callbackId];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> B.exec(_BARCODE, fname, args);</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tgetCallbackId : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">successCallback</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> success = <span class=\"keyword\">typeof</span> successCallback !== <span class=\"string\">'function'</span> ? <span class=\"literal\">null</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tsuccessCallback(args);</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t\tcallbackId = B.callbackId(success, <span class=\"keyword\">this</span>.errorCallback);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> callbackId;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t</div><div class=\"line\">\t\terrorCallback : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">errorMsg</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Javascript callback error: \"</span> + errorMsg);</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\tjsHello : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.callNative(<span class=\"string\">\"nativeHello\"</span>, args, <span class=\"literal\">null</span>);</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t</div><div class=\"line\">    <span class=\"built_in\">window</span>.plus.Push = JPushPlugin;</div><div class=\"line\">    </div><div class=\"line\">&#125;, <span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n<p>其中 callNative 为封装好用于调用 native 代码的方法，参数如下：</p>\n<ul>\n<li>fname：要调用的 native 的方法名</li>\n<li>args：传给 native 的参数，必须是数组</li>\n<li>successCallback:成功回调，null 为没有</li>\n</ul>\n<p>以上代码最后面的 “jsHello” 方法，即为封装好的 js 方法，在工程的其他文件里通过 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.plus.Push.jsHello(args);</div></pre></td></tr></table></figure>\n<p>的方式即可调用本地的 “nativeHello” 方法。</p>\n<h2 id=\"Objective-C-调用-js-的实现\"><a href=\"#Objective-C-调用-js-的实现\" class=\"headerlink\" title=\"Objective-C 调用 js 的实现\"></a>Objective-C 调用 js 的实现</h2><h4 id=\"与-Phonegap-的差异\"><a href=\"#与-Phonegap-的差异\" class=\"headerlink\" title=\"与 Phonegap 的差异\"></a>与 Phonegap 的差异</h4><p>在 HBuilder 官方文档中并没有提及 OC 调用 js 的方法，从 OC 中的类名（PGPlugin 等）可以看出，其应该是对 Phonegap 的封装，但是却并没有提供 Phonegap 中直接调用 js 的接口，例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *evalString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"jsFunction(%@)\"</span>,args];</div><div class=\"line\">[<span class=\"keyword\">self</span>.commandDelegate evalJs:evalString];</div></pre></td></tr></table></figure>\n<p>也无法向 js 发送 event ，例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *evalString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"cordova.fireDocumentEvent('event_name',%@)\"</span>,args];</div><div class=\"line\">[<span class=\"keyword\">self</span>.commandDelegate evalJs:evalString];</div></pre></td></tr></table></figure>\n<p>其中 self 为继承自 CDVPlugin 的插件类实例。</p>\n<p>经过笔者的查找，发现在 HBuilder 提供的 PDRCoreAppFrame（：PDRNView ：UIView） 类中，有如下方法可以调用 js 代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> @brief 在当前页面同步执行Javascript</div><div class=\"line\"> @param js javasrcipt 脚本</div><div class=\"line\"> @return NSString* 执行结果</div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"built_in\">NSString</span>*)stringByEvaluatingJavaScriptFromString:(<span class=\"built_in\">NSString</span>*)js;</div></pre></td></tr></table></figure>\n<h4 id=\"获取-PDRCoreAppFrame-对象\"><a href=\"#获取-PDRCoreAppFrame-对象\" class=\"headerlink\" title=\"获取 PDRCoreAppFrame 对象\"></a>获取 PDRCoreAppFrame 对象</h4><p>其中 PDRCoreAppFrame 为控制 webView 的实例，数量可能为多个，且在视图层级中的位置不确定，故需要通过遍历 app 中所有 view ，来找出 PDRCoreAppFrame ，以下是通过 <strong>递归</strong> 找出所有 PDRCoreAppFrame 的方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">NSMutableArray</span>*)searchViews:(<span class=\"built_in\">NSArray</span>*)views&#123;</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *frames = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *temp <span class=\"keyword\">in</span> views) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([temp isMemberOfClass:[PDRCoreAppFrame <span class=\"keyword\">class</span>]]) &#123;</div><div class=\"line\">            [frames addObject:temp];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([temp subviews]) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSMutableArray</span> *tempArray = [<span class=\"keyword\">self</span> searchViews:[temp subviews]];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *tempView <span class=\"keyword\">in</span> tempArray) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ([tempView isMemberOfClass:[PDRCoreAppFrame <span class=\"keyword\">class</span>]]) &#123;</div><div class=\"line\">                    [frames addObject:tempView];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> frames;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>参数 views 为同一层级中的 views</li>\n<li>返回值 frames 为从该层级中找到的 PDRCoreAppFrame</li>\n</ul>\n<h4 id=\"调用-js\"><a href=\"#调用-js\" class=\"headerlink\" title=\"调用 js\"></a>调用 js</h4><p>这样我们就可以用上述方法获取到所有的 PDRCoreAppFrame 进而调用 js 代码了：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)evaluatingJavaScriptFromString:(<span class=\"built_in\">NSString</span>*)string&#123;</div><div class=\"line\">    <span class=\"built_in\">UIWindow</span> *window = [[<span class=\"built_in\">UIApplication</span> sharedApplication] keyWindow];</div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *views = [[[window rootViewController] view] subviews];</div><div class=\"line\">    <span class=\"comment\">//调用上述方法</span></div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *frames = [<span class=\"keyword\">self</span> searchViews:views];</div><div class=\"line\">    <span class=\"keyword\">for</span> (PDRCoreAppFrame *appFrame <span class=\"keyword\">in</span> frames) &#123;</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">            [appFrame stringByEvaluatingJavaScriptFromString:string];</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用示例：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *evalString = <span class=\"string\">@\"alert(\"</span>make a js call<span class=\"string\">\");\"</span>;</div><div class=\"line\">[<span class=\"keyword\">self</span> evaluatingJavaScriptFromString:evalString];</div></pre></td></tr></table></figure>\n<p><strong>但是并不建议用这种方式</strong>，因为该方法会强制向每个 webView 的页面都发送一条执行语句，有时会出现并不希望的结果。因此，<strong>建议使用下面发送 event 的方式</strong>，并在 js 中接收后进行处理。</p><p></p>\n<h4 id=\"向-js-发送-event\"><a href=\"#向-js-发送-event\" class=\"headerlink\" title=\"向 js 发送 event\"></a>向 js 发送 event</h4><p>笔者对上述方法再次进行了封装：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)fireEvent:(<span class=\"built_in\">NSString</span>*)event args:(<span class=\"keyword\">id</span>)args&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *evalString = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"built_in\">NSError</span>  *error      = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *argsString = <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (args) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([args isKindOfClass:[<span class=\"built_in\">NSString</span> <span class=\"keyword\">class</span>]]) &#123;</div><div class=\"line\">            argsString = args;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">NSData</span>   *jsonData   = [<span class=\"built_in\">NSJSONSerialization</span> dataWithJSONObject:args options:<span class=\"number\">0</span> error:&amp;error];</div><div class=\"line\">            argsString = [[<span class=\"built_in\">NSString</span> alloc]initWithData:jsonData encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        evalString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"\\</span></div><div class=\"line\">                      var jpushEvent = document.createEvent('HTMLEvents');\\</div><div class=\"line\">                      jpushEvent.initEvent('%@', true, true);\\</div><div class=\"line\">                      jpushEvent.eventType = 'message';\\</div><div class=\"line\">                      jpushEvent.arguments = '%@';\\</div><div class=\"line\">                      document.dispatchEvent(jpushEvent);\",event,argsString];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        evalString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"\\</span></div><div class=\"line\">                      var jpushEvent = document.createEvent('HTMLEvents');\\</div><div class=\"line\">                      jpushEvent.initEvent('%@', true, true);\\</div><div class=\"line\">                      jpushEvent.eventType = 'message';\\</div><div class=\"line\">                      document.dispatchEvent(jpushEvent);\",event];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//调用上述方法</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> evaluatingJavaScriptFromString:evalString];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中对传入的 args 进行了简单的处理。</p>\n<p><strong>最后我们通过调用一行代码即可做到向 js 发送 event ：</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span> fireEvent:<span class=\"string\">@\"event_name\"</span> args:args];</div></pre></td></tr></table></figure>\n<h4 id=\"js-接收-event-并处理\"><a href=\"#js-接收-event-并处理\" class=\"headerlink\" title=\"js 接收 event 并处理\"></a>js 接收 event 并处理</h4><p>在上一步中发送了 “event_name” 的事件之后，可以在 html 的 script 中通过以下方式捕获：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"event_name\"</span>, onEventFunc, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onEventFunc</span>(<span class=\"params\">args</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = <span class=\"built_in\">JSON</span>.parese(args);</div><div class=\"line\">\t<span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\talert(obj);</div><div class=\"line\">\t&#125;,<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>至此，就彻底实现了 Objective-C 向 js 的沟通</strong></p>\n<h3 id=\"如您对本文有任何疑问或建议，欢迎交流\"><a href=\"#如您对本文有任何疑问或建议，欢迎交流\" class=\"headerlink\" title=\"* 如您对本文有任何疑问或建议，欢迎交流\"></a>* 如您对本文有任何疑问或建议，欢迎交流</h3>","excerpt":"","more":"<p>本人最近开发了 HBulider 集成极光推送(JPush)的插件，<strong>鉴于 HBuilder 官网上缺少 iOS 的示例</strong> ，而且官网也只给出了 JavaScript 调用 native 代码的接口，对于 native 调用 JavaScript 并且向 JavaScript 发送 event 事件的方法却在 native层 进行了封装。笔者在踩过了一些小坑之后，终于成功的开发了插件，并且 <strong>实现了 JavaScript 和 native 的双向沟通</strong> 。特此跟大家分享一下在 HBuilder 插件开发过程中的经验和关键代码。</p>\n<h2 id=\"JPush-实例展示\"><a href=\"#JPush-实例展示\" class=\"headerlink\" title=\"JPush 实例展示\"></a>JPush 实例展示</h2><p>首先附上完整 demo <a href=\"https://github.com/jpush/jpush-hbuilder-demo\">[JPush HBuilder Demo]</a> 并为大家展示一下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-cbeb0ed0f747e50c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"实例及功能展示\"></p>\n<p>以上即为根据本文内容开发出的实例</p>\n<p>如您需使用极光推送产品请至此 <a href=\"https://www.jpush.cno\">[极光推送官方网站]</a></p>\n<h2 id=\"新插件配置\"><a href=\"#新插件配置\" class=\"headerlink\" title=\"新插件配置\"></a>新插件配置</h2><h5 id=\"配置-manifest-json\"><a href=\"#配置-manifest-json\" class=\"headerlink\" title=\"配置 manifest.json\"></a>配置 manifest.json</h5><p>首先用源码的方式打开工程 /Pandora/ 目录下的 manifest.json ，在 “permissions” 中添加新的插件名称：<br>​<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> \"permissions\": &#123;</div><div class=\"line\">\t\"Push\":&#123;</div><div class=\"line\">\t\t\"description\": \"极光推送插件\"</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h5 id=\"配置-feature-plist\"><a href=\"#配置-feature-plist\" class=\"headerlink\" title=\"配置 feature.plist\"></a>配置 feature.plist</h5><p>在 Xcode 中打开 /PandoraApi.bundle/ 目录下的 feature.plist ，为插件添加新的 item：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-93398821b63f61e9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"feature.plist\"></p>\n<p>其中需要注意的是：</p>\n<ul>\n<li>最顶部的 key 值 Push ，必须跟 manifest.json 中配置的插件名一致</li>\n<li>class 的值需要跟 native 代码中的类名一致，此处为 JPushPlugin</li>\n<li>因为本插件拓展自 HBuilder 已经封装好的 PGPush ，故 baseclass 为父类</li>\n</ul>\n<p>通过以上配置，就可以在 JavaScript 中通过 Push –&gt; JPushPlugin 的对应关系，调用 native 代码了。</p>\n<h2 id=\"JavaScript-调用本地代码的实现\"><a href=\"#JavaScript-调用本地代码的实现\" class=\"headerlink\" title=\"JavaScript 调用本地代码的实现\"></a>JavaScript 调用本地代码的实现</h2><p>这部分在  <a href=\"http://ask.dcloud.net.cn/docs/#http://ask.dcloud.net.cn/article/67\">[HBuilder 官网插件开发指导]</a> 中已经给出了较详细的说明，这里就不再赘述，附上关键代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"plusready\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> _BARCODE = <span class=\"string\">'Push'</span>;\t<span class=\"comment\">// 插件名称</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> B = <span class=\"built_in\">window</span>.plus.bridge;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">var</span> JPushPlugin = &#123;</div><div class=\"line\"></div><div class=\"line\">\t\tcallNative : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fname, args, successCallback</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> callbackId = <span class=\"keyword\">this</span>.getCallbackId(successCallback, <span class=\"keyword\">this</span>.errorCallback);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (args != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">\t\t\t\targs.unshift(callbackId);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> args = [callbackId];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> B.exec(_BARCODE, fname, args);</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tgetCallbackId : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">successCallback</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> success = <span class=\"keyword\">typeof</span> successCallback !== <span class=\"string\">'function'</span> ? <span class=\"literal\">null</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </div><div class=\"line\">\t\t\t</span>&#123;</div><div class=\"line\">\t\t\t\tsuccessCallback(args);</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t\tcallbackId = B.callbackId(success, <span class=\"keyword\">this</span>.errorCallback);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> callbackId;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t</div><div class=\"line\">\t\terrorCallback : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">errorMsg</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Javascript callback error: \"</span> + errorMsg);</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\tjsHello : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.callNative(<span class=\"string\">\"nativeHello\"</span>, args, <span class=\"literal\">null</span>);</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t</div><div class=\"line\">    <span class=\"built_in\">window</span>.plus.Push = JPushPlugin;</div><div class=\"line\">    </div><div class=\"line\">&#125;, <span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n<p>其中 callNative 为封装好用于调用 native 代码的方法，参数如下：</p>\n<ul>\n<li>fname：要调用的 native 的方法名</li>\n<li>args：传给 native 的参数，必须是数组</li>\n<li>successCallback:成功回调，null 为没有</li>\n</ul>\n<p>以上代码最后面的 “jsHello” 方法，即为封装好的 js 方法，在工程的其他文件里通过 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.plus.Push.jsHello(args);</div></pre></td></tr></table></figure>\n<p>的方式即可调用本地的 “nativeHello” 方法。</p>\n<h2 id=\"Objective-C-调用-js-的实现\"><a href=\"#Objective-C-调用-js-的实现\" class=\"headerlink\" title=\"Objective-C 调用 js 的实现\"></a>Objective-C 调用 js 的实现</h2><h4 id=\"与-Phonegap-的差异\"><a href=\"#与-Phonegap-的差异\" class=\"headerlink\" title=\"与 Phonegap 的差异\"></a>与 Phonegap 的差异</h4><p>在 HBuilder 官方文档中并没有提及 OC 调用 js 的方法，从 OC 中的类名（PGPlugin 等）可以看出，其应该是对 Phonegap 的封装，但是却并没有提供 Phonegap 中直接调用 js 的接口，例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *evalString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"jsFunction(%@)\"</span>,args];</div><div class=\"line\">[<span class=\"keyword\">self</span>.commandDelegate evalJs:evalString];</div></pre></td></tr></table></figure>\n<p>也无法向 js 发送 event ，例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *evalString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"cordova.fireDocumentEvent('event_name',%@)\"</span>,args];</div><div class=\"line\">[<span class=\"keyword\">self</span>.commandDelegate evalJs:evalString];</div></pre></td></tr></table></figure>\n<p>其中 self 为继承自 CDVPlugin 的插件类实例。</p>\n<p>经过笔者的查找，发现在 HBuilder 提供的 PDRCoreAppFrame（：PDRNView ：UIView） 类中，有如下方法可以调用 js 代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> @brief 在当前页面同步执行Javascript</div><div class=\"line\"> @param js javasrcipt 脚本</div><div class=\"line\"> @return NSString* 执行结果</div><div class=\"line\"> */</span></div><div class=\"line\">- (<span class=\"built_in\">NSString</span>*)stringByEvaluatingJavaScriptFromString:(<span class=\"built_in\">NSString</span>*)js;</div></pre></td></tr></table></figure>\n<h4 id=\"获取-PDRCoreAppFrame-对象\"><a href=\"#获取-PDRCoreAppFrame-对象\" class=\"headerlink\" title=\"获取 PDRCoreAppFrame 对象\"></a>获取 PDRCoreAppFrame 对象</h4><p>其中 PDRCoreAppFrame 为控制 webView 的实例，数量可能为多个，且在视图层级中的位置不确定，故需要通过遍历 app 中所有 view ，来找出 PDRCoreAppFrame ，以下是通过 <strong>递归</strong> 找出所有 PDRCoreAppFrame 的方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">NSMutableArray</span>*)searchViews:(<span class=\"built_in\">NSArray</span>*)views&#123;</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *frames = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *temp <span class=\"keyword\">in</span> views) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([temp isMemberOfClass:[PDRCoreAppFrame <span class=\"keyword\">class</span>]]) &#123;</div><div class=\"line\">            [frames addObject:temp];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([temp subviews]) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSMutableArray</span> *tempArray = [<span class=\"keyword\">self</span> searchViews:[temp subviews]];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *tempView <span class=\"keyword\">in</span> tempArray) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ([tempView isMemberOfClass:[PDRCoreAppFrame <span class=\"keyword\">class</span>]]) &#123;</div><div class=\"line\">                    [frames addObject:tempView];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> frames;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>参数 views 为同一层级中的 views</li>\n<li>返回值 frames 为从该层级中找到的 PDRCoreAppFrame</li>\n</ul>\n<h4 id=\"调用-js\"><a href=\"#调用-js\" class=\"headerlink\" title=\"调用 js\"></a>调用 js</h4><p>这样我们就可以用上述方法获取到所有的 PDRCoreAppFrame 进而调用 js 代码了：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)evaluatingJavaScriptFromString:(<span class=\"built_in\">NSString</span>*)string&#123;</div><div class=\"line\">    <span class=\"built_in\">UIWindow</span> *window = [[<span class=\"built_in\">UIApplication</span> sharedApplication] keyWindow];</div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *views = [[[window rootViewController] view] subviews];</div><div class=\"line\">    <span class=\"comment\">//调用上述方法</span></div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *frames = [<span class=\"keyword\">self</span> searchViews:views];</div><div class=\"line\">    <span class=\"keyword\">for</span> (PDRCoreAppFrame *appFrame <span class=\"keyword\">in</span> frames) &#123;</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">            [appFrame stringByEvaluatingJavaScriptFromString:string];</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用示例：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *evalString = <span class=\"string\">@\"alert(\"</span>make a js call<span class=\"string\">\");\"</span>;</div><div class=\"line\">[<span class=\"keyword\">self</span> evaluatingJavaScriptFromString:evalString];</div></pre></td></tr></table></figure>\n<p><strong>但是并不建议用这种方式</strong>，因为该方法会强制向每个 webView 的页面都发送一条执行语句，有时会出现并不希望的结果。因此，<strong>建议使用下面发送 event 的方式</strong>，并在 js 中接收后进行处理。</p></p>\n<h4 id=\"向-js-发送-event\"><a href=\"#向-js-发送-event\" class=\"headerlink\" title=\"向 js 发送 event\"></a>向 js 发送 event</h4><p>笔者对上述方法再次进行了封装：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)fireEvent:(<span class=\"built_in\">NSString</span>*)event args:(<span class=\"keyword\">id</span>)args&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *evalString = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"built_in\">NSError</span>  *error      = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *argsString = <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (args) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([args isKindOfClass:[<span class=\"built_in\">NSString</span> <span class=\"keyword\">class</span>]]) &#123;</div><div class=\"line\">            argsString = args;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">NSData</span>   *jsonData   = [<span class=\"built_in\">NSJSONSerialization</span> dataWithJSONObject:args options:<span class=\"number\">0</span> error:&amp;error];</div><div class=\"line\">            argsString = [[<span class=\"built_in\">NSString</span> alloc]initWithData:jsonData encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        evalString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"\\</div><div class=\"line\">                      var jpushEvent = document.createEvent('HTMLEvents');\\</div><div class=\"line\">                      jpushEvent.initEvent('%@', true, true);\\</div><div class=\"line\">                      jpushEvent.eventType = 'message';\\</div><div class=\"line\">                      jpushEvent.arguments = '%@';\\</div><div class=\"line\">                      document.dispatchEvent(jpushEvent);\"</span>,event,argsString];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        evalString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"\\</div><div class=\"line\">                      var jpushEvent = document.createEvent('HTMLEvents');\\</div><div class=\"line\">                      jpushEvent.initEvent('%@', true, true);\\</div><div class=\"line\">                      jpushEvent.eventType = 'message';\\</div><div class=\"line\">                      document.dispatchEvent(jpushEvent);\"</span>,event];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//调用上述方法</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> evaluatingJavaScriptFromString:evalString];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中对传入的 args 进行了简单的处理。</p>\n<p><strong>最后我们通过调用一行代码即可做到向 js 发送 event ：</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span> fireEvent:<span class=\"string\">@\"event_name\"</span> args:args];</div></pre></td></tr></table></figure>\n<h4 id=\"js-接收-event-并处理\"><a href=\"#js-接收-event-并处理\" class=\"headerlink\" title=\"js 接收 event 并处理\"></a>js 接收 event 并处理</h4><p>在上一步中发送了 “event_name” 的事件之后，可以在 html 的 script 中通过以下方式捕获：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"event_name\"</span>, onEventFunc, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onEventFunc</span>(<span class=\"params\">args</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = <span class=\"built_in\">JSON</span>.parese(args);</div><div class=\"line\">\t<span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\talert(obj);</div><div class=\"line\">\t&#125;,<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>至此，就彻底实现了 Objective-C 向 js 的沟通</strong></p>\n<h3 id=\"如您对本文有任何疑问或建议，欢迎交流\"><a href=\"#如您对本文有任何疑问或建议，欢迎交流\" class=\"headerlink\" title=\"* 如您对本文有任何疑问或建议，欢迎交流\"></a>* 如您对本文有任何疑问或建议，欢迎交流</h3>"},{"title":"1行命令集成极光推送","date":"2016-05-31T01:44:42.000Z","_content":"\n本文写给那些想极速集成推送功能的开发者，不用阅读任何文档，不用写一行代码，1分钟集成，立即使用！\n\n- 不论你的项目是用 Objective-C 开发的 native app\n- 还是基于 Cordova(phonegap、ionic、We5x 等框架)的 Hybrid app\n- 或是 Cocos2d-x 的 iOS 项目，统统只需打开 **终端** 输入一行命令：\n\n  ```shell\n  appkey=yourAppkey platform=yourPlatform npm install one-line-jpush-ios\n  ```\n\n  *下载推送 SDK、添加代码、添加类库全部自动进行，完成后立刻推送！*\n  参数说明：\n  - appkey：上传证书在[【极光推送控制台】](https://www.jpush.cn/common/apps)获取 appkey [【获取 appkey 方法】](http://docs.jpush.io/guideline/ios_guide/#sdk)\n  - platform：部署平台，可选值：native、cordova、cocos2dx\n    例：\n    ```shell\n    //native\n    appkey=yourAppkey platform=native npm install one-line-jpush-ios\n    //cordova\n    appkey=yourAppkey platform=cordova npm install one-line-jpush-ios\n    //cocos2d-x\n    appkey=yourAppkey platform=cocos2dx npm install one-line-jpush-ios\n    ```\n\n在相应目录下执行完对应的一条命令后，并且 apple 证书配置正确的情况下 [(iOS 证书设置指南)](http://docs.jpush.io/client/ios_tutorials/#ios_1)，就可以立即推送了！\n\n\n**针对不同项目，该命令会做不同的事情，需要在对应目录下执行：**\n\n### Native App(Object-C) 项目\n---\n#### 执行命令\n从终端进入到项目**根目录的与项目同名文件夹**下(如：/HelloWorld/HelloWorld/)\n![](http://upload-images.jianshu.io/upload_images/1944178-001a94f69faa037b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n- 在该目录下，终端执行命令\n\n  ```sh\n  appkey=yourAppkey platform=native npm install one-line-jpush-ios\n  ```\n\n  其中 `yourAppkey` 替换成在 [极光控制台](https://www.jpush.cn/common/apps) 创建 app 时得到的 appkey\n\n#### 完成！！\n安装成功命令行提示以下内容\n![](http://upload-images.jianshu.io/upload_images/1944178-affb0c1d9819845f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 命令说明\nplatform=native 时帮大家做以下事情：\n- 自动从极光官网下载并安装 [极光推送最新版本 SDK](http://docs.jpush.io/updates/#jpush-ios-sdk-v217) 到根目录所在项目中\n- 自动写入**启动 SDK** 及**接收推送**的必要代码 (在 AppDelegate.m 中)\n- 自动添加必须的类库到 iOS 项目中\n\n\n### Cordova 项目\n----------------------------------------\n#### 执行命令\n- 从终端进入到 Cordova 项目的**根**目录下：\n  ![](http://upload-images.jianshu.io/upload_images/1944178-4f599d1aa473fc59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 在该目录下，终端执行命令即可：\n\n  ```sh\n  appkey=yourAppkey platform=cordova npm install one-line-jpush-ios\n  ```\n\n  其中 `yourAppkey` 替换成准备工作中在[极光控制台](https://www.jpush.cn/common/apps)创建 app 时得到的 appkey\n\n#### 完成！！\n安装成功命令行提示以下内容\n![](http://upload-images.jianshu.io/upload_images/1944178-f286a46ff730eb84.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 命令说明\nplatform=cordova 时帮大家做以下事情：\n- 自动创建 iOS 项目\n- 自动从 GitHub 上下载最新的 极光推送 [JPush Phonegap Plugin](https://github.com/jpush/jpush-phonegap-plugin) 插件\n- 自动安装该插件到当前项目并添加必要配置\n- 自动添加必须的类库到 iOS 项目中\n\n### Cocos2d-x 项目\n----------------------------------------\n\n#### 执行命令\n- 从终端进入到 Cocos2d-x 项目的 `proj.ios_mac` 目录下，跟 `ios`、`mac` 文件夹同一级：\n\n![](http://upload-images.jianshu.io/upload_images/1944178-a8915b029356dfa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 在该目录下，终端执行命令即可：\n\n  ```sh\n  appkey=yourAppkey platform=cocos2dx npm install one-line-jpush-ios\n  ```\n  其中 `yourAppkey` 替换成在[极光控制台](https://www.jpush.cn/common/apps)创建 app 时得到的 appkey\n\n#### 完成！！\n安装成功命令行提示以下内容\n![](http://upload-images.jianshu.io/upload_images/1944178-dcf93d9460f8fb1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n#### 命令说明\nplatform=cocos2dx 时帮大家做以下事情：\n- 自动从 GitHub 上下载最新的 Cocos2d-x 插件 [JPush Cocos2d-x Plugin](https://github.com/jpush/jpush-cocos2d-x-plugin)\n- 自动安装该插件到当前项目并添加必要配置\n- 自动写入**启动 SDK**及**接收推送**的必要代码 (在 AppController.mm 中)\n- 自动添加必须的类库到 iOS 项目中\n\n### 终端使用方法 & 控制台推送方法\n---\n[终端使用方法 & 控制台推送方法 点我](https://github.com/Yasashi/one-line-jpush)","source":"_posts/2.1行命令集成极光推送.md","raw":"---\ntitle: 1行命令集成极光推送\ndate: 2016.05.31 09:44:42\ncategories:\n\t- JPush\n\t- Push Notification\ntags:\n\t- JPush\n\t- Push Notification\n---\n\n本文写给那些想极速集成推送功能的开发者，不用阅读任何文档，不用写一行代码，1分钟集成，立即使用！\n\n- 不论你的项目是用 Objective-C 开发的 native app\n- 还是基于 Cordova(phonegap、ionic、We5x 等框架)的 Hybrid app\n- 或是 Cocos2d-x 的 iOS 项目，统统只需打开 **终端** 输入一行命令：\n\n  ```shell\n  appkey=yourAppkey platform=yourPlatform npm install one-line-jpush-ios\n  ```\n\n  *下载推送 SDK、添加代码、添加类库全部自动进行，完成后立刻推送！*\n  参数说明：\n  - appkey：上传证书在[【极光推送控制台】](https://www.jpush.cn/common/apps)获取 appkey [【获取 appkey 方法】](http://docs.jpush.io/guideline/ios_guide/#sdk)\n  - platform：部署平台，可选值：native、cordova、cocos2dx\n    例：\n    ```shell\n    //native\n    appkey=yourAppkey platform=native npm install one-line-jpush-ios\n    //cordova\n    appkey=yourAppkey platform=cordova npm install one-line-jpush-ios\n    //cocos2d-x\n    appkey=yourAppkey platform=cocos2dx npm install one-line-jpush-ios\n    ```\n\n在相应目录下执行完对应的一条命令后，并且 apple 证书配置正确的情况下 [(iOS 证书设置指南)](http://docs.jpush.io/client/ios_tutorials/#ios_1)，就可以立即推送了！\n\n\n**针对不同项目，该命令会做不同的事情，需要在对应目录下执行：**\n\n### Native App(Object-C) 项目\n---\n#### 执行命令\n从终端进入到项目**根目录的与项目同名文件夹**下(如：/HelloWorld/HelloWorld/)\n![](http://upload-images.jianshu.io/upload_images/1944178-001a94f69faa037b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n- 在该目录下，终端执行命令\n\n  ```sh\n  appkey=yourAppkey platform=native npm install one-line-jpush-ios\n  ```\n\n  其中 `yourAppkey` 替换成在 [极光控制台](https://www.jpush.cn/common/apps) 创建 app 时得到的 appkey\n\n#### 完成！！\n安装成功命令行提示以下内容\n![](http://upload-images.jianshu.io/upload_images/1944178-affb0c1d9819845f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 命令说明\nplatform=native 时帮大家做以下事情：\n- 自动从极光官网下载并安装 [极光推送最新版本 SDK](http://docs.jpush.io/updates/#jpush-ios-sdk-v217) 到根目录所在项目中\n- 自动写入**启动 SDK** 及**接收推送**的必要代码 (在 AppDelegate.m 中)\n- 自动添加必须的类库到 iOS 项目中\n\n\n### Cordova 项目\n----------------------------------------\n#### 执行命令\n- 从终端进入到 Cordova 项目的**根**目录下：\n  ![](http://upload-images.jianshu.io/upload_images/1944178-4f599d1aa473fc59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 在该目录下，终端执行命令即可：\n\n  ```sh\n  appkey=yourAppkey platform=cordova npm install one-line-jpush-ios\n  ```\n\n  其中 `yourAppkey` 替换成准备工作中在[极光控制台](https://www.jpush.cn/common/apps)创建 app 时得到的 appkey\n\n#### 完成！！\n安装成功命令行提示以下内容\n![](http://upload-images.jianshu.io/upload_images/1944178-f286a46ff730eb84.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 命令说明\nplatform=cordova 时帮大家做以下事情：\n- 自动创建 iOS 项目\n- 自动从 GitHub 上下载最新的 极光推送 [JPush Phonegap Plugin](https://github.com/jpush/jpush-phonegap-plugin) 插件\n- 自动安装该插件到当前项目并添加必要配置\n- 自动添加必须的类库到 iOS 项目中\n\n### Cocos2d-x 项目\n----------------------------------------\n\n#### 执行命令\n- 从终端进入到 Cocos2d-x 项目的 `proj.ios_mac` 目录下，跟 `ios`、`mac` 文件夹同一级：\n\n![](http://upload-images.jianshu.io/upload_images/1944178-a8915b029356dfa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 在该目录下，终端执行命令即可：\n\n  ```sh\n  appkey=yourAppkey platform=cocos2dx npm install one-line-jpush-ios\n  ```\n  其中 `yourAppkey` 替换成在[极光控制台](https://www.jpush.cn/common/apps)创建 app 时得到的 appkey\n\n#### 完成！！\n安装成功命令行提示以下内容\n![](http://upload-images.jianshu.io/upload_images/1944178-dcf93d9460f8fb1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n#### 命令说明\nplatform=cocos2dx 时帮大家做以下事情：\n- 自动从 GitHub 上下载最新的 Cocos2d-x 插件 [JPush Cocos2d-x Plugin](https://github.com/jpush/jpush-cocos2d-x-plugin)\n- 自动安装该插件到当前项目并添加必要配置\n- 自动写入**启动 SDK**及**接收推送**的必要代码 (在 AppController.mm 中)\n- 自动添加必须的类库到 iOS 项目中\n\n### 终端使用方法 & 控制台推送方法\n---\n[终端使用方法 & 控制台推送方法 点我](https://github.com/Yasashi/one-line-jpush)","slug":"2.1行命令集成极光推送","published":1,"updated":"2016-08-30T08:19:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisk6ki7d0002sbbd37uovizh","content":"<p>本文写给那些想极速集成推送功能的开发者，不用阅读任何文档，不用写一行代码，1分钟集成，立即使用！</p>\n<ul>\n<li>不论你的项目是用 Objective-C 开发的 native app</li>\n<li>还是基于 Cordova(phonegap、ionic、We5x 等框架)的 Hybrid app</li>\n<li><p>或是 Cocos2d-x 的 iOS 项目，统统只需打开 <strong>终端</strong> 输入一行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appkey=yourAppkey platform=yourPlatform npm install one-line-jpush-ios</div></pre></td></tr></table></figure>\n<p><em>下载推送 SDK、添加代码、添加类库全部自动进行，完成后立刻推送！</em><br>参数说明：</p>\n<ul>\n<li>appkey：上传证书在<a href=\"https://www.jpush.cn/common/apps\" target=\"_blank\" rel=\"external\">【极光推送控制台】</a>获取 appkey <a href=\"http://docs.jpush.io/guideline/ios_guide/#sdk\" target=\"_blank\" rel=\"external\">【获取 appkey 方法】</a></li>\n<li>platform：部署平台，可选值：native、cordova、cocos2dx<br>例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//native</div><div class=\"line\">appkey=yourAppkey platform=native npm install one-line-jpush-ios</div><div class=\"line\">//cordova</div><div class=\"line\">appkey=yourAppkey platform=cordova npm install one-line-jpush-ios</div><div class=\"line\">//cocos2d-x</div><div class=\"line\">appkey=yourAppkey platform=cocos2dx npm install one-line-jpush-ios</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>在相应目录下执行完对应的一条命令后，并且 apple 证书配置正确的情况下 <a href=\"http://docs.jpush.io/client/ios_tutorials/#ios_1\" target=\"_blank\" rel=\"external\">(iOS 证书设置指南)</a>，就可以立即推送了！</p>\n<p><strong>针对不同项目，该命令会做不同的事情，需要在对应目录下执行：</strong></p>\n<h3 id=\"Native-App-Object-C-项目\"><a href=\"#Native-App-Object-C-项目\" class=\"headerlink\" title=\"Native App(Object-C) 项目\"></a>Native App(Object-C) 项目</h3><hr>\n<h4 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h4><p>从终端进入到项目<strong>根目录的与项目同名文件夹</strong>下(如：/HelloWorld/HelloWorld/)<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-001a94f69faa037b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ul>\n<li><p>在该目录下，终端执行命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appkey=yourAppkey platform=native npm install one-line-jpush-ios</div></pre></td></tr></table></figure>\n<p>其中 <code>yourAppkey</code> 替换成在 <a href=\"https://www.jpush.cn/common/apps\" target=\"_blank\" rel=\"external\">极光控制台</a> 创建 app 时得到的 appkey</p>\n</li>\n</ul>\n<h4 id=\"完成！！\"><a href=\"#完成！！\" class=\"headerlink\" title=\"完成！！\"></a>完成！！</h4><p>安装成功命令行提示以下内容<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-affb0c1d9819845f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"命令说明\"><a href=\"#命令说明\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h4><p>platform=native 时帮大家做以下事情：</p>\n<ul>\n<li>自动从极光官网下载并安装 <a href=\"http://docs.jpush.io/updates/#jpush-ios-sdk-v217\" target=\"_blank\" rel=\"external\">极光推送最新版本 SDK</a> 到根目录所在项目中</li>\n<li>自动写入<strong>启动 SDK</strong> 及<strong>接收推送</strong>的必要代码 (在 AppDelegate.m 中)</li>\n<li>自动添加必须的类库到 iOS 项目中</li>\n</ul>\n<h3 id=\"Cordova-项目\"><a href=\"#Cordova-项目\" class=\"headerlink\" title=\"Cordova 项目\"></a>Cordova 项目</h3><hr>\n<h4 id=\"执行命令-1\"><a href=\"#执行命令-1\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h4><ul>\n<li><p>从终端进入到 Cordova 项目的<strong>根</strong>目录下：<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-4f599d1aa473fc59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n</li>\n<li><p>在该目录下，终端执行命令即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appkey=yourAppkey platform=cordova npm install one-line-jpush-ios</div></pre></td></tr></table></figure>\n<p>其中 <code>yourAppkey</code> 替换成准备工作中在<a href=\"https://www.jpush.cn/common/apps\" target=\"_blank\" rel=\"external\">极光控制台</a>创建 app 时得到的 appkey</p>\n</li>\n</ul>\n<h4 id=\"完成！！-1\"><a href=\"#完成！！-1\" class=\"headerlink\" title=\"完成！！\"></a>完成！！</h4><p>安装成功命令行提示以下内容<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-f286a46ff730eb84.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"命令说明-1\"><a href=\"#命令说明-1\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h4><p>platform=cordova 时帮大家做以下事情：</p>\n<ul>\n<li>自动创建 iOS 项目</li>\n<li>自动从 GitHub 上下载最新的 极光推送 <a href=\"https://github.com/jpush/jpush-phonegap-plugin\" target=\"_blank\" rel=\"external\">JPush Phonegap Plugin</a> 插件</li>\n<li>自动安装该插件到当前项目并添加必要配置</li>\n<li>自动添加必须的类库到 iOS 项目中</li>\n</ul>\n<h3 id=\"Cocos2d-x-项目\"><a href=\"#Cocos2d-x-项目\" class=\"headerlink\" title=\"Cocos2d-x 项目\"></a>Cocos2d-x 项目</h3><hr>\n<h4 id=\"执行命令-2\"><a href=\"#执行命令-2\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h4><ul>\n<li>从终端进入到 Cocos2d-x 项目的 <code>proj.ios_mac</code> 目录下，跟 <code>ios</code>、<code>mac</code> 文件夹同一级：</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-a8915b029356dfa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ul>\n<li><p>在该目录下，终端执行命令即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appkey=yourAppkey platform=cocos2dx npm install one-line-jpush-ios</div></pre></td></tr></table></figure>\n<p>其中 <code>yourAppkey</code> 替换成在<a href=\"https://www.jpush.cn/common/apps\" target=\"_blank\" rel=\"external\">极光控制台</a>创建 app 时得到的 appkey</p>\n</li>\n</ul>\n<h4 id=\"完成！！-2\"><a href=\"#完成！！-2\" class=\"headerlink\" title=\"完成！！\"></a>完成！！</h4><p>安装成功命令行提示以下内容<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-dcf93d9460f8fb1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"命令说明-2\"><a href=\"#命令说明-2\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h4><p>platform=cocos2dx 时帮大家做以下事情：</p>\n<ul>\n<li>自动从 GitHub 上下载最新的 Cocos2d-x 插件 <a href=\"https://github.com/jpush/jpush-cocos2d-x-plugin\" target=\"_blank\" rel=\"external\">JPush Cocos2d-x Plugin</a></li>\n<li>自动安装该插件到当前项目并添加必要配置</li>\n<li>自动写入<strong>启动 SDK</strong>及<strong>接收推送</strong>的必要代码 (在 AppController.mm 中)</li>\n<li>自动添加必须的类库到 iOS 项目中</li>\n</ul>\n<h3 id=\"终端使用方法-amp-控制台推送方法\"><a href=\"#终端使用方法-amp-控制台推送方法\" class=\"headerlink\" title=\"终端使用方法 &amp; 控制台推送方法\"></a>终端使用方法 &amp; 控制台推送方法</h3><hr>\n<p><a href=\"https://github.com/Yasashi/one-line-jpush\" target=\"_blank\" rel=\"external\">终端使用方法 &amp; 控制台推送方法 点我</a></p>\n","excerpt":"","more":"<p>本文写给那些想极速集成推送功能的开发者，不用阅读任何文档，不用写一行代码，1分钟集成，立即使用！</p>\n<ul>\n<li>不论你的项目是用 Objective-C 开发的 native app</li>\n<li>还是基于 Cordova(phonegap、ionic、We5x 等框架)的 Hybrid app</li>\n<li><p>或是 Cocos2d-x 的 iOS 项目，统统只需打开 <strong>终端</strong> 输入一行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appkey=yourAppkey platform=yourPlatform npm install one-line-jpush-ios</div></pre></td></tr></table></figure>\n<p><em>下载推送 SDK、添加代码、添加类库全部自动进行，完成后立刻推送！</em><br>参数说明：</p>\n<ul>\n<li>appkey：上传证书在<a href=\"https://www.jpush.cn/common/apps\">【极光推送控制台】</a>获取 appkey <a href=\"http://docs.jpush.io/guideline/ios_guide/#sdk\">【获取 appkey 方法】</a></li>\n<li>platform：部署平台，可选值：native、cordova、cocos2dx<br>例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//native</div><div class=\"line\">appkey=yourAppkey platform=native npm install one-line-jpush-ios</div><div class=\"line\">//cordova</div><div class=\"line\">appkey=yourAppkey platform=cordova npm install one-line-jpush-ios</div><div class=\"line\">//cocos2d-x</div><div class=\"line\">appkey=yourAppkey platform=cocos2dx npm install one-line-jpush-ios</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>在相应目录下执行完对应的一条命令后，并且 apple 证书配置正确的情况下 <a href=\"http://docs.jpush.io/client/ios_tutorials/#ios_1\">(iOS 证书设置指南)</a>，就可以立即推送了！</p>\n<p><strong>针对不同项目，该命令会做不同的事情，需要在对应目录下执行：</strong></p>\n<h3 id=\"Native-App-Object-C-项目\"><a href=\"#Native-App-Object-C-项目\" class=\"headerlink\" title=\"Native App(Object-C) 项目\"></a>Native App(Object-C) 项目</h3><hr>\n<h4 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h4><p>从终端进入到项目<strong>根目录的与项目同名文件夹</strong>下(如：/HelloWorld/HelloWorld/)<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-001a94f69faa037b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ul>\n<li><p>在该目录下，终端执行命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appkey=yourAppkey platform=native npm install one-line-jpush-ios</div></pre></td></tr></table></figure>\n<p>其中 <code>yourAppkey</code> 替换成在 <a href=\"https://www.jpush.cn/common/apps\">极光控制台</a> 创建 app 时得到的 appkey</p>\n</li>\n</ul>\n<h4 id=\"完成！！\"><a href=\"#完成！！\" class=\"headerlink\" title=\"完成！！\"></a>完成！！</h4><p>安装成功命令行提示以下内容<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-affb0c1d9819845f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"命令说明\"><a href=\"#命令说明\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h4><p>platform=native 时帮大家做以下事情：</p>\n<ul>\n<li>自动从极光官网下载并安装 <a href=\"http://docs.jpush.io/updates/#jpush-ios-sdk-v217\">极光推送最新版本 SDK</a> 到根目录所在项目中</li>\n<li>自动写入<strong>启动 SDK</strong> 及<strong>接收推送</strong>的必要代码 (在 AppDelegate.m 中)</li>\n<li>自动添加必须的类库到 iOS 项目中</li>\n</ul>\n<h3 id=\"Cordova-项目\"><a href=\"#Cordova-项目\" class=\"headerlink\" title=\"Cordova 项目\"></a>Cordova 项目</h3><hr>\n<h4 id=\"执行命令-1\"><a href=\"#执行命令-1\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h4><ul>\n<li><p>从终端进入到 Cordova 项目的<strong>根</strong>目录下：<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-4f599d1aa473fc59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n</li>\n<li><p>在该目录下，终端执行命令即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appkey=yourAppkey platform=cordova npm install one-line-jpush-ios</div></pre></td></tr></table></figure>\n<p>其中 <code>yourAppkey</code> 替换成准备工作中在<a href=\"https://www.jpush.cn/common/apps\">极光控制台</a>创建 app 时得到的 appkey</p>\n</li>\n</ul>\n<h4 id=\"完成！！-1\"><a href=\"#完成！！-1\" class=\"headerlink\" title=\"完成！！\"></a>完成！！</h4><p>安装成功命令行提示以下内容<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-f286a46ff730eb84.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"命令说明-1\"><a href=\"#命令说明-1\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h4><p>platform=cordova 时帮大家做以下事情：</p>\n<ul>\n<li>自动创建 iOS 项目</li>\n<li>自动从 GitHub 上下载最新的 极光推送 <a href=\"https://github.com/jpush/jpush-phonegap-plugin\">JPush Phonegap Plugin</a> 插件</li>\n<li>自动安装该插件到当前项目并添加必要配置</li>\n<li>自动添加必须的类库到 iOS 项目中</li>\n</ul>\n<h3 id=\"Cocos2d-x-项目\"><a href=\"#Cocos2d-x-项目\" class=\"headerlink\" title=\"Cocos2d-x 项目\"></a>Cocos2d-x 项目</h3><hr>\n<h4 id=\"执行命令-2\"><a href=\"#执行命令-2\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h4><ul>\n<li>从终端进入到 Cocos2d-x 项目的 <code>proj.ios_mac</code> 目录下，跟 <code>ios</code>、<code>mac</code> 文件夹同一级：</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-a8915b029356dfa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ul>\n<li><p>在该目录下，终端执行命令即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appkey=yourAppkey platform=cocos2dx npm install one-line-jpush-ios</div></pre></td></tr></table></figure>\n<p>其中 <code>yourAppkey</code> 替换成在<a href=\"https://www.jpush.cn/common/apps\">极光控制台</a>创建 app 时得到的 appkey</p>\n</li>\n</ul>\n<h4 id=\"完成！！-2\"><a href=\"#完成！！-2\" class=\"headerlink\" title=\"完成！！\"></a>完成！！</h4><p>安装成功命令行提示以下内容<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-dcf93d9460f8fb1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"命令说明-2\"><a href=\"#命令说明-2\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h4><p>platform=cocos2dx 时帮大家做以下事情：</p>\n<ul>\n<li>自动从 GitHub 上下载最新的 Cocos2d-x 插件 <a href=\"https://github.com/jpush/jpush-cocos2d-x-plugin\">JPush Cocos2d-x Plugin</a></li>\n<li>自动安装该插件到当前项目并添加必要配置</li>\n<li>自动写入<strong>启动 SDK</strong>及<strong>接收推送</strong>的必要代码 (在 AppController.mm 中)</li>\n<li>自动添加必须的类库到 iOS 项目中</li>\n</ul>\n<h3 id=\"终端使用方法-amp-控制台推送方法\"><a href=\"#终端使用方法-amp-控制台推送方法\" class=\"headerlink\" title=\"终端使用方法 &amp; 控制台推送方法\"></a>终端使用方法 &amp; 控制台推送方法</h3><hr>\n<p><a href=\"https://github.com/Yasashi/one-line-jpush\">终端使用方法 &amp; 控制台推送方法 点我</a></p>\n"},{"title":"玩转 iOS 10 推送 —— UserNotifications Framework（上）","date":"2016-06-30T02:03:26.000Z","_content":"### iOS 10 came\n在今年 6月14号 苹果开发者大会 WWDC 2016 之后，笔者赶紧就去 apple 的开发者网站下载了最新的 [Xcode 8 beta](https://developer.apple.com/download/) 和 [iOS 10 beta](https://developer.apple.com/download/)，然后在自己的手机上装了 iOS 10 beta ，狠狠地体验了一把。\n可以说 iOS 10 无论从界面风格，还是 Framework 都做了很多改动。最直观的感受就是界面的圆角增多了，系统动画更加多样和流畅，系统 App 的功能也变得更丰富了。\n\n而 iOS 10 里的推送功能，也较之前更加强大，\n今天我们就来聊聊 iOS 10 里的推送功能。\n\n### Notifications before iOS 10\n首先我们一起简单回顾下 iOS 10 以前的推送服务。\niOS 推送分为 Local Notifications（本地推送） 和 Remote Notifications（远程推送），先看 2 张图：\n\n![Local Notifications](http://upload-images.jianshu.io/upload_images/1944178-006d1b30b20cbc62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Remote Notifications](http://upload-images.jianshu.io/upload_images/1944178-efa4c15a8865addc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n简单的说就是本地推送通过 App 本地定制，加入到系统的 Schedule 里，然后在指定的时间推送指定文字。而远程推送通过服务端向苹果推送服务器 Apple Push Notification Service (APNs) 发送 Notification Payload，之后 APNs 再将推送下发到指定设备的 指定 App 上。\n以及 iOS 7 之后在不显式地弹窗打扰用户的情况下，进行的**静默推送**：\n\n![Silent Push](http://upload-images.jianshu.io/upload_images/1944178-70b570f81e223db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n具体做法可以参考 [iOS 7 Background Remote Notification](http://docs.jiguang.cn/client/ios_tutorials/#ios-7-background-remote-notification)\n\n## User Notifications Framework\n---\n好，扯了这么多，该进入今天的正题了 —— User Notifications Framework 。\n首先在 `AppDelegate.m` 中\n\n##### import\n    #import <UserNotifications/UserNotifications.h>\n\n###### 注册推送\n以下分别是 iOS 10 之前和之后的注册方式，其中的 `UNAuthorizationOptions` 里还可以找到 1 个 `UNAuthorizationOptionCarPlay` 的值是专为车载系统定制的值。\n```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n    //iOS 10 before\n    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound categories:nil];\n    [application registerUserNotificationSettings:settings];\n\n    //iOS 10\n    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\n    [center requestAuthorizationWithOptions:(UNAuthorizationOptionBadge | UNAuthorizationOptionSound | UNAuthorizationOptionAlert) completionHandler:^(BOOL granted, NSError * _Nullable error) {\n        if (!error) {\n            NSLog(@\"request authorization succeeded!\");\n        }\n    }];\n\n    return YES;\n}\n```\n\n##### Notification settings\n之前注册推送服务，用户点击了同意还是不同意，以及用户之后又做了怎样的更改我们都无从得知，现在 apple 开放了这个 API，我们可以直接获取到用户的设定信息了。\n```\n[center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) {\n        NSLog(@\"%@\",settings);\n}];\n```\n打印获得如下信息：\n```\n<UNNotificationSettings: 0x16567310; \nauthorizationStatus: Authorized, \nnotificationCenterSetting: Enabled, \nsoundSetting: Enabled, \nbadgeSetting: Enabled, \nlockScreenSetting: Enabled, \nalertSetting: NotSupported,\ncarPlaySetting: Enabled, \nalertStyle: Banner>\n```\n\n##### Token Registration\n跟之前一样\n```\n[[UIApplication sharedApplication] registerForRemoteNotifications];\n```\n\n##### Content\n以前只能展示一条文字，现在可以有 title 、subtitle 以及 body 了。\n![](http://upload-images.jianshu.io/upload_images/1944178-9095e97331a18015.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n定制方法如下：\n```\n//Local Notification\nUNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];\ncontent.title = @\"Introduction to Notifications\";\ncontent.subtitle = @\"Session 707\";\ncontent.body = @\"Woah! These new notifications look amazing! Don’t you agree?\";\ncontent.badge = @1;\n\n//Remote Notification\n{\n\"aps\" : {\n    \"alert\" : { \n         \"title\" : \"Introduction to Notifications\", \n         \"subtitle\" : \"Session 707\",         \n         \"body\" : \"Woah! These new notifications look amazing! Don’t you agree?\"\n                },\n    \"badge\" : 1\n        },\n}\n```\n\n##### Triggers\n又是一个新的功能，有三种\n- UNTimeIntervalNotificationTrigger\n- UNCalendarNotificationTrigger\n- UNLocationNotificationTrigger\n\n```\n//2 分钟后提醒\nUNTimeIntervalNotificationTrigger *trigger1 = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:120 repeats:NO];\n\n//每小时重复 1 次喊我喝水\nUNTimeIntervalNotificationTrigger *trigger2 = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:3600 repeats:YES];\n\n//每周一早上 8：00 提醒我给老婆做早饭\nNSDateComponents *components = [[NSDateComponents alloc] init];\ncomponents.weekday = 2;\ncomponents.hour = 8;\nUNCalendarNotificationTrigger *trigger3 = [UNCalendarNotificationTrigger triggerWithDateMatchingComponents:components repeats:YES];\n\n//#import <CoreLocation/CoreLocation.h>\n//一到麦当劳就喊我下车\nCLRegion *region = [[CLRegion alloc] init];\nUNLocationNotificationTrigger *trigger4 = [UNLocationNotificationTrigger triggerWithRegion:region repeats:NO];\n```\n##### Add Request\n```\nNSString *requestIdentifier = @\"sampleRequest\";\nUNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifier\n                                                                          content:content\n                                                                          trigger:trigger1];\n[center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) {\n\n}];\n```\n\n#### 推送小结\n然后整个推送的过程就变成了酱紫：\n![](http://upload-images.jianshu.io/upload_images/1944178-2e8ba5a7369e65c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- Local Notifications 通过定义 `Content` 和 `Trigger` 向  `UNUserNotificationCenter`  进行 `request` 这三部曲来实现。\n- Remote Notifications 则向 `APNs` 发送 `Notification Payload` 。\n\n\n##### Notification Handling\n设定了推送，然后就结束了？iOS 10 并没有这么简单！\n通过实现协议，使 App 处于前台时捕捉并处理即将触发的推送：\n```\n@interface AppDelegate () <UNUserNotificationCenterDelegate>\n\n-(void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler{\n\n    completionHandler(UNNotificationPresentationOptionAlert | UNNotificationPresentationOptionSound);\n\n}\n```\n让它只显示 alert 和 sound ,而忽略 badge 。\n\n##### Notification Management\n彻底掌控整个推送周期：\n- Local Notification 通过更新 request\n- Remote Notification 通过新的字段 `apns-collapse-id`\n\n通过之前的 `addNotificationRequest:` 方法，在 `id` 不变的情况下重新添加，就可以刷新原有的推送。\n\n```\nNSString *requestIdentifier = @\"sampleRequest\";\nUNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifier\n                                                                      content:newContent\n                                                                      trigger:newTrigger1];\n[center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) {\n\n}];\n```\n删除计划的推送：\n```\n[center removePendingNotificationRequestsWithIdentifiers:@[requestIdentifier]];\n```\n此外 `UNUserNotificationCenter.h` 中还有诸如**删除所有推送、查看已经发出的推送、删除已经发出的推送**等等强大的接口。\n\n刷新原有的推送后，在通知中心的显示里，也会有相应的变化，这里注意第 2 条信息，现在比分是 1：0\n![](http://upload-images.jianshu.io/upload_images/1944178-eb0de20d1c45e72a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n比分刷新后为 1：1，在不产生新的推送条目的情况下位置被前置了！\n![](http://upload-images.jianshu.io/upload_images/1944178-80d798dfdb57866c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n试想利用这个方法，不断的刷新推送，是不是就可以做到让自己 App 的推送内容始终展示在用户手机通知中心的最顶端，力压其余所有内容了呢？总感觉有点不厚道啊~\n## Advanced Notifications\n---\n关于推送的更多类似 `Media Attachments` 的高级功能，我们将在下一篇里详细讨论。\n##### Media Attachments \n为推送添加更多媒体附件，诸如图片、音乐\n![](http://upload-images.jianshu.io/upload_images/1944178-abb5d92e6abf6c81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/3.玩转 iOS 10 推送 —— UserNotifications Framework（上）.md","raw":"---\ntitle: 玩转 iOS 10 推送 —— UserNotifications Framework（上）\ndate: 2016.06.30 10:03:26\ntags:\n\t- Push Notification\n\t- iOS 10\ncategories:\n\t- Push Notification\n\t- iOS 10\n---\n### iOS 10 came\n在今年 6月14号 苹果开发者大会 WWDC 2016 之后，笔者赶紧就去 apple 的开发者网站下载了最新的 [Xcode 8 beta](https://developer.apple.com/download/) 和 [iOS 10 beta](https://developer.apple.com/download/)，然后在自己的手机上装了 iOS 10 beta ，狠狠地体验了一把。\n可以说 iOS 10 无论从界面风格，还是 Framework 都做了很多改动。最直观的感受就是界面的圆角增多了，系统动画更加多样和流畅，系统 App 的功能也变得更丰富了。\n\n而 iOS 10 里的推送功能，也较之前更加强大，\n今天我们就来聊聊 iOS 10 里的推送功能。\n\n### Notifications before iOS 10\n首先我们一起简单回顾下 iOS 10 以前的推送服务。\niOS 推送分为 Local Notifications（本地推送） 和 Remote Notifications（远程推送），先看 2 张图：\n\n![Local Notifications](http://upload-images.jianshu.io/upload_images/1944178-006d1b30b20cbc62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Remote Notifications](http://upload-images.jianshu.io/upload_images/1944178-efa4c15a8865addc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n简单的说就是本地推送通过 App 本地定制，加入到系统的 Schedule 里，然后在指定的时间推送指定文字。而远程推送通过服务端向苹果推送服务器 Apple Push Notification Service (APNs) 发送 Notification Payload，之后 APNs 再将推送下发到指定设备的 指定 App 上。\n以及 iOS 7 之后在不显式地弹窗打扰用户的情况下，进行的**静默推送**：\n\n![Silent Push](http://upload-images.jianshu.io/upload_images/1944178-70b570f81e223db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n具体做法可以参考 [iOS 7 Background Remote Notification](http://docs.jiguang.cn/client/ios_tutorials/#ios-7-background-remote-notification)\n\n## User Notifications Framework\n---\n好，扯了这么多，该进入今天的正题了 —— User Notifications Framework 。\n首先在 `AppDelegate.m` 中\n\n##### import\n    #import <UserNotifications/UserNotifications.h>\n\n###### 注册推送\n以下分别是 iOS 10 之前和之后的注册方式，其中的 `UNAuthorizationOptions` 里还可以找到 1 个 `UNAuthorizationOptionCarPlay` 的值是专为车载系统定制的值。\n```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n    //iOS 10 before\n    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound categories:nil];\n    [application registerUserNotificationSettings:settings];\n\n    //iOS 10\n    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\n    [center requestAuthorizationWithOptions:(UNAuthorizationOptionBadge | UNAuthorizationOptionSound | UNAuthorizationOptionAlert) completionHandler:^(BOOL granted, NSError * _Nullable error) {\n        if (!error) {\n            NSLog(@\"request authorization succeeded!\");\n        }\n    }];\n\n    return YES;\n}\n```\n\n##### Notification settings\n之前注册推送服务，用户点击了同意还是不同意，以及用户之后又做了怎样的更改我们都无从得知，现在 apple 开放了这个 API，我们可以直接获取到用户的设定信息了。\n```\n[center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) {\n        NSLog(@\"%@\",settings);\n}];\n```\n打印获得如下信息：\n```\n<UNNotificationSettings: 0x16567310; \nauthorizationStatus: Authorized, \nnotificationCenterSetting: Enabled, \nsoundSetting: Enabled, \nbadgeSetting: Enabled, \nlockScreenSetting: Enabled, \nalertSetting: NotSupported,\ncarPlaySetting: Enabled, \nalertStyle: Banner>\n```\n\n##### Token Registration\n跟之前一样\n```\n[[UIApplication sharedApplication] registerForRemoteNotifications];\n```\n\n##### Content\n以前只能展示一条文字，现在可以有 title 、subtitle 以及 body 了。\n![](http://upload-images.jianshu.io/upload_images/1944178-9095e97331a18015.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n定制方法如下：\n```\n//Local Notification\nUNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];\ncontent.title = @\"Introduction to Notifications\";\ncontent.subtitle = @\"Session 707\";\ncontent.body = @\"Woah! These new notifications look amazing! Don’t you agree?\";\ncontent.badge = @1;\n\n//Remote Notification\n{\n\"aps\" : {\n    \"alert\" : { \n         \"title\" : \"Introduction to Notifications\", \n         \"subtitle\" : \"Session 707\",         \n         \"body\" : \"Woah! These new notifications look amazing! Don’t you agree?\"\n                },\n    \"badge\" : 1\n        },\n}\n```\n\n##### Triggers\n又是一个新的功能，有三种\n- UNTimeIntervalNotificationTrigger\n- UNCalendarNotificationTrigger\n- UNLocationNotificationTrigger\n\n```\n//2 分钟后提醒\nUNTimeIntervalNotificationTrigger *trigger1 = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:120 repeats:NO];\n\n//每小时重复 1 次喊我喝水\nUNTimeIntervalNotificationTrigger *trigger2 = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:3600 repeats:YES];\n\n//每周一早上 8：00 提醒我给老婆做早饭\nNSDateComponents *components = [[NSDateComponents alloc] init];\ncomponents.weekday = 2;\ncomponents.hour = 8;\nUNCalendarNotificationTrigger *trigger3 = [UNCalendarNotificationTrigger triggerWithDateMatchingComponents:components repeats:YES];\n\n//#import <CoreLocation/CoreLocation.h>\n//一到麦当劳就喊我下车\nCLRegion *region = [[CLRegion alloc] init];\nUNLocationNotificationTrigger *trigger4 = [UNLocationNotificationTrigger triggerWithRegion:region repeats:NO];\n```\n##### Add Request\n```\nNSString *requestIdentifier = @\"sampleRequest\";\nUNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifier\n                                                                          content:content\n                                                                          trigger:trigger1];\n[center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) {\n\n}];\n```\n\n#### 推送小结\n然后整个推送的过程就变成了酱紫：\n![](http://upload-images.jianshu.io/upload_images/1944178-2e8ba5a7369e65c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- Local Notifications 通过定义 `Content` 和 `Trigger` 向  `UNUserNotificationCenter`  进行 `request` 这三部曲来实现。\n- Remote Notifications 则向 `APNs` 发送 `Notification Payload` 。\n\n\n##### Notification Handling\n设定了推送，然后就结束了？iOS 10 并没有这么简单！\n通过实现协议，使 App 处于前台时捕捉并处理即将触发的推送：\n```\n@interface AppDelegate () <UNUserNotificationCenterDelegate>\n\n-(void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler{\n\n    completionHandler(UNNotificationPresentationOptionAlert | UNNotificationPresentationOptionSound);\n\n}\n```\n让它只显示 alert 和 sound ,而忽略 badge 。\n\n##### Notification Management\n彻底掌控整个推送周期：\n- Local Notification 通过更新 request\n- Remote Notification 通过新的字段 `apns-collapse-id`\n\n通过之前的 `addNotificationRequest:` 方法，在 `id` 不变的情况下重新添加，就可以刷新原有的推送。\n\n```\nNSString *requestIdentifier = @\"sampleRequest\";\nUNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifier\n                                                                      content:newContent\n                                                                      trigger:newTrigger1];\n[center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) {\n\n}];\n```\n删除计划的推送：\n```\n[center removePendingNotificationRequestsWithIdentifiers:@[requestIdentifier]];\n```\n此外 `UNUserNotificationCenter.h` 中还有诸如**删除所有推送、查看已经发出的推送、删除已经发出的推送**等等强大的接口。\n\n刷新原有的推送后，在通知中心的显示里，也会有相应的变化，这里注意第 2 条信息，现在比分是 1：0\n![](http://upload-images.jianshu.io/upload_images/1944178-eb0de20d1c45e72a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n比分刷新后为 1：1，在不产生新的推送条目的情况下位置被前置了！\n![](http://upload-images.jianshu.io/upload_images/1944178-80d798dfdb57866c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n试想利用这个方法，不断的刷新推送，是不是就可以做到让自己 App 的推送内容始终展示在用户手机通知中心的最顶端，力压其余所有内容了呢？总感觉有点不厚道啊~\n## Advanced Notifications\n---\n关于推送的更多类似 `Media Attachments` 的高级功能，我们将在下一篇里详细讨论。\n##### Media Attachments \n为推送添加更多媒体附件，诸如图片、音乐\n![](http://upload-images.jianshu.io/upload_images/1944178-abb5d92e6abf6c81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"3.玩转 iOS 10 推送 —— UserNotifications Framework（上）","published":1,"updated":"2016-08-30T08:21:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisk6ki7p0006sbbdm0eu14y0","content":"<h3 id=\"iOS-10-came\"><a href=\"#iOS-10-came\" class=\"headerlink\" title=\"iOS 10 came\"></a>iOS 10 came</h3><p>在今年 6月14号 苹果开发者大会 WWDC 2016 之后，笔者赶紧就去 apple 的开发者网站下载了最新的 <a href=\"https://developer.apple.com/download/\" target=\"_blank\" rel=\"external\">Xcode 8 beta</a> 和 <a href=\"https://developer.apple.com/download/\" target=\"_blank\" rel=\"external\">iOS 10 beta</a>，然后在自己的手机上装了 iOS 10 beta ，狠狠地体验了一把。<br>可以说 iOS 10 无论从界面风格，还是 Framework 都做了很多改动。最直观的感受就是界面的圆角增多了，系统动画更加多样和流畅，系统 App 的功能也变得更丰富了。</p>\n<p>而 iOS 10 里的推送功能，也较之前更加强大，<br>今天我们就来聊聊 iOS 10 里的推送功能。</p>\n<h3 id=\"Notifications-before-iOS-10\"><a href=\"#Notifications-before-iOS-10\" class=\"headerlink\" title=\"Notifications before iOS 10\"></a>Notifications before iOS 10</h3><p>首先我们一起简单回顾下 iOS 10 以前的推送服务。<br>iOS 推送分为 Local Notifications（本地推送） 和 Remote Notifications（远程推送），先看 2 张图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-006d1b30b20cbc62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Local Notifications\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-efa4c15a8865addc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Remote Notifications\"></p>\n<p>简单的说就是本地推送通过 App 本地定制，加入到系统的 Schedule 里，然后在指定的时间推送指定文字。而远程推送通过服务端向苹果推送服务器 Apple Push Notification Service (APNs) 发送 Notification Payload，之后 APNs 再将推送下发到指定设备的 指定 App 上。<br>以及 iOS 7 之后在不显式地弹窗打扰用户的情况下，进行的<strong>静默推送</strong>：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-70b570f81e223db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Silent Push\"></p>\n<p>具体做法可以参考 <a href=\"http://docs.jiguang.cn/client/ios_tutorials/#ios-7-background-remote-notification\" target=\"_blank\" rel=\"external\">iOS 7 Background Remote Notification</a></p>\n<h2 id=\"User-Notifications-Framework\"><a href=\"#User-Notifications-Framework\" class=\"headerlink\" title=\"User Notifications Framework\"></a>User Notifications Framework</h2><hr>\n<p>好，扯了这么多，该进入今天的正题了 —— User Notifications Framework 。<br>首先在 <code>AppDelegate.m</code> 中</p>\n<h5 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h5><pre><code>#import &lt;UserNotifications/UserNotifications.h&gt;\n</code></pre><h6 id=\"注册推送\"><a href=\"#注册推送\" class=\"headerlink\" title=\"注册推送\"></a>注册推送</h6><p>以下分别是 iOS 10 之前和之后的注册方式，其中的 <code>UNAuthorizationOptions</code> 里还可以找到 1 个 <code>UNAuthorizationOptionCarPlay</code> 的值是专为车载系统定制的值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class=\"line\"></div><div class=\"line\">    //iOS 10 before</div><div class=\"line\">    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound categories:nil];</div><div class=\"line\">    [application registerUserNotificationSettings:settings];</div><div class=\"line\"></div><div class=\"line\">    //iOS 10</div><div class=\"line\">    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</div><div class=\"line\">    [center requestAuthorizationWithOptions:(UNAuthorizationOptionBadge | UNAuthorizationOptionSound | UNAuthorizationOptionAlert) completionHandler:^(BOOL granted, NSError * _Nullable error) &#123;</div><div class=\"line\">        if (!error) &#123;</div><div class=\"line\">            NSLog(@&quot;request authorization succeeded!&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Notification-settings\"><a href=\"#Notification-settings\" class=\"headerlink\" title=\"Notification settings\"></a>Notification settings</h5><p>之前注册推送服务，用户点击了同意还是不同意，以及用户之后又做了怎样的更改我们都无从得知，现在 apple 开放了这个 API，我们可以直接获取到用户的设定信息了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) &#123;</div><div class=\"line\">        NSLog(@&quot;%@&quot;,settings);</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure></p>\n<p>打印获得如下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;UNNotificationSettings: 0x16567310; </div><div class=\"line\">authorizationStatus: Authorized, </div><div class=\"line\">notificationCenterSetting: Enabled, </div><div class=\"line\">soundSetting: Enabled, </div><div class=\"line\">badgeSetting: Enabled, </div><div class=\"line\">lockScreenSetting: Enabled, </div><div class=\"line\">alertSetting: NotSupported,</div><div class=\"line\">carPlaySetting: Enabled, </div><div class=\"line\">alertStyle: Banner&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Token-Registration\"><a href=\"#Token-Registration\" class=\"headerlink\" title=\"Token Registration\"></a>Token Registration</h5><p>跟之前一样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[UIApplication sharedApplication] registerForRemoteNotifications];</div></pre></td></tr></table></figure></p>\n<h5 id=\"Content\"><a href=\"#Content\" class=\"headerlink\" title=\"Content\"></a>Content</h5><p>以前只能展示一条文字，现在可以有 title 、subtitle 以及 body 了。<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-9095e97331a18015.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>定制方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Local Notification</div><div class=\"line\">UNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];</div><div class=\"line\">content.title = @&quot;Introduction to Notifications&quot;;</div><div class=\"line\">content.subtitle = @&quot;Session 707&quot;;</div><div class=\"line\">content.body = @&quot;Woah! These new notifications look amazing! Don’t you agree?&quot;;</div><div class=\"line\">content.badge = @1;</div><div class=\"line\"></div><div class=\"line\">//Remote Notification</div><div class=\"line\">&#123;</div><div class=\"line\">&quot;aps&quot; : &#123;</div><div class=\"line\">    &quot;alert&quot; : &#123; </div><div class=\"line\">         &quot;title&quot; : &quot;Introduction to Notifications&quot;, </div><div class=\"line\">         &quot;subtitle&quot; : &quot;Session 707&quot;,         </div><div class=\"line\">         &quot;body&quot; : &quot;Woah! These new notifications look amazing! Don’t you agree?&quot;</div><div class=\"line\">                &#125;,</div><div class=\"line\">    &quot;badge&quot; : 1</div><div class=\"line\">        &#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Triggers\"><a href=\"#Triggers\" class=\"headerlink\" title=\"Triggers\"></a>Triggers</h5><p>又是一个新的功能，有三种</p>\n<ul>\n<li>UNTimeIntervalNotificationTrigger</li>\n<li>UNCalendarNotificationTrigger</li>\n<li>UNLocationNotificationTrigger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">//2 分钟后提醒</div><div class=\"line\">UNTimeIntervalNotificationTrigger *trigger1 = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:120 repeats:NO];</div><div class=\"line\"></div><div class=\"line\">//每小时重复 1 次喊我喝水</div><div class=\"line\">UNTimeIntervalNotificationTrigger *trigger2 = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:3600 repeats:YES];</div><div class=\"line\"></div><div class=\"line\">//每周一早上 8：00 提醒我给老婆做早饭</div><div class=\"line\">NSDateComponents *components = [[NSDateComponents alloc] init];</div><div class=\"line\">components.weekday = 2;</div><div class=\"line\">components.hour = 8;</div><div class=\"line\">UNCalendarNotificationTrigger *trigger3 = [UNCalendarNotificationTrigger triggerWithDateMatchingComponents:components repeats:YES];</div><div class=\"line\"></div><div class=\"line\">//#import &lt;CoreLocation/CoreLocation.h&gt;</div><div class=\"line\">//一到麦当劳就喊我下车</div><div class=\"line\">CLRegion *region = [[CLRegion alloc] init];</div><div class=\"line\">UNLocationNotificationTrigger *trigger4 = [UNLocationNotificationTrigger triggerWithRegion:region repeats:NO];</div></pre></td></tr></table></figure>\n<h5 id=\"Add-Request\"><a href=\"#Add-Request\" class=\"headerlink\" title=\"Add Request\"></a>Add Request</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *requestIdentifier = @&quot;sampleRequest&quot;;</div><div class=\"line\">UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifier</div><div class=\"line\">                                                                          content:content</div><div class=\"line\">                                                                          trigger:trigger1];</div><div class=\"line\">[center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<h4 id=\"推送小结\"><a href=\"#推送小结\" class=\"headerlink\" title=\"推送小结\"></a>推送小结</h4><p>然后整个推送的过程就变成了酱紫：<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-2e8ba5a7369e65c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ul>\n<li>Local Notifications 通过定义 <code>Content</code> 和 <code>Trigger</code> 向  <code>UNUserNotificationCenter</code>  进行 <code>request</code> 这三部曲来实现。</li>\n<li>Remote Notifications 则向 <code>APNs</code> 发送 <code>Notification Payload</code> 。</li>\n</ul>\n<h5 id=\"Notification-Handling\"><a href=\"#Notification-Handling\" class=\"headerlink\" title=\"Notification Handling\"></a>Notification Handling</h5><p>设定了推送，然后就结束了？iOS 10 并没有这么简单！<br>通过实现协议，使 App 处于前台时捕捉并处理即将触发的推送：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface AppDelegate () &lt;UNUserNotificationCenterDelegate&gt;</div><div class=\"line\"></div><div class=\"line\">-(void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler&#123;</div><div class=\"line\"></div><div class=\"line\">    completionHandler(UNNotificationPresentationOptionAlert | UNNotificationPresentationOptionSound);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>让它只显示 alert 和 sound ,而忽略 badge 。</p>\n<h5 id=\"Notification-Management\"><a href=\"#Notification-Management\" class=\"headerlink\" title=\"Notification Management\"></a>Notification Management</h5><p>彻底掌控整个推送周期：</p>\n<ul>\n<li>Local Notification 通过更新 request</li>\n<li>Remote Notification 通过新的字段 <code>apns-collapse-id</code></li>\n</ul>\n<p>通过之前的 <code>addNotificationRequest:</code> 方法，在 <code>id</code> 不变的情况下重新添加，就可以刷新原有的推送。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *requestIdentifier = @&quot;sampleRequest&quot;;</div><div class=\"line\">UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifier</div><div class=\"line\">                                                                      content:newContent</div><div class=\"line\">                                                                      trigger:newTrigger1];</div><div class=\"line\">[center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>删除计划的推送：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[center removePendingNotificationRequestsWithIdentifiers:@[requestIdentifier]];</div></pre></td></tr></table></figure></p>\n<p>此外 <code>UNUserNotificationCenter.h</code> 中还有诸如<strong>删除所有推送、查看已经发出的推送、删除已经发出的推送</strong>等等强大的接口。</p>\n<p>刷新原有的推送后，在通知中心的显示里，也会有相应的变化，这里注意第 2 条信息，现在比分是 1：0<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-eb0de20d1c45e72a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>比分刷新后为 1：1，在不产生新的推送条目的情况下位置被前置了！<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-80d798dfdb57866c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>试想利用这个方法，不断的刷新推送，是不是就可以做到让自己 App 的推送内容始终展示在用户手机通知中心的最顶端，力压其余所有内容了呢？总感觉有点不厚道啊~</p>\n<h2 id=\"Advanced-Notifications\"><a href=\"#Advanced-Notifications\" class=\"headerlink\" title=\"Advanced Notifications\"></a>Advanced Notifications</h2><hr>\n<p>关于推送的更多类似 <code>Media Attachments</code> 的高级功能，我们将在下一篇里详细讨论。</p>\n<h5 id=\"Media-Attachments\"><a href=\"#Media-Attachments\" class=\"headerlink\" title=\"Media Attachments\"></a>Media Attachments</h5><p>为推送添加更多媒体附件，诸如图片、音乐<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-abb5d92e6abf6c81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","excerpt":"","more":"<h3 id=\"iOS-10-came\"><a href=\"#iOS-10-came\" class=\"headerlink\" title=\"iOS 10 came\"></a>iOS 10 came</h3><p>在今年 6月14号 苹果开发者大会 WWDC 2016 之后，笔者赶紧就去 apple 的开发者网站下载了最新的 <a href=\"https://developer.apple.com/download/\">Xcode 8 beta</a> 和 <a href=\"https://developer.apple.com/download/\">iOS 10 beta</a>，然后在自己的手机上装了 iOS 10 beta ，狠狠地体验了一把。<br>可以说 iOS 10 无论从界面风格，还是 Framework 都做了很多改动。最直观的感受就是界面的圆角增多了，系统动画更加多样和流畅，系统 App 的功能也变得更丰富了。</p>\n<p>而 iOS 10 里的推送功能，也较之前更加强大，<br>今天我们就来聊聊 iOS 10 里的推送功能。</p>\n<h3 id=\"Notifications-before-iOS-10\"><a href=\"#Notifications-before-iOS-10\" class=\"headerlink\" title=\"Notifications before iOS 10\"></a>Notifications before iOS 10</h3><p>首先我们一起简单回顾下 iOS 10 以前的推送服务。<br>iOS 推送分为 Local Notifications（本地推送） 和 Remote Notifications（远程推送），先看 2 张图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-006d1b30b20cbc62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Local Notifications\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-efa4c15a8865addc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Remote Notifications\"></p>\n<p>简单的说就是本地推送通过 App 本地定制，加入到系统的 Schedule 里，然后在指定的时间推送指定文字。而远程推送通过服务端向苹果推送服务器 Apple Push Notification Service (APNs) 发送 Notification Payload，之后 APNs 再将推送下发到指定设备的 指定 App 上。<br>以及 iOS 7 之后在不显式地弹窗打扰用户的情况下，进行的<strong>静默推送</strong>：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1944178-70b570f81e223db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Silent Push\"></p>\n<p>具体做法可以参考 <a href=\"http://docs.jiguang.cn/client/ios_tutorials/#ios-7-background-remote-notification\">iOS 7 Background Remote Notification</a></p>\n<h2 id=\"User-Notifications-Framework\"><a href=\"#User-Notifications-Framework\" class=\"headerlink\" title=\"User Notifications Framework\"></a>User Notifications Framework</h2><hr>\n<p>好，扯了这么多，该进入今天的正题了 —— User Notifications Framework 。<br>首先在 <code>AppDelegate.m</code> 中</p>\n<h5 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h5><pre><code>#import &lt;UserNotifications/UserNotifications.h&gt;\n</code></pre><h6 id=\"注册推送\"><a href=\"#注册推送\" class=\"headerlink\" title=\"注册推送\"></a>注册推送</h6><p>以下分别是 iOS 10 之前和之后的注册方式，其中的 <code>UNAuthorizationOptions</code> 里还可以找到 1 个 <code>UNAuthorizationOptionCarPlay</code> 的值是专为车载系统定制的值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class=\"line\"></div><div class=\"line\">    //iOS 10 before</div><div class=\"line\">    UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound categories:nil];</div><div class=\"line\">    [application registerUserNotificationSettings:settings];</div><div class=\"line\"></div><div class=\"line\">    //iOS 10</div><div class=\"line\">    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</div><div class=\"line\">    [center requestAuthorizationWithOptions:(UNAuthorizationOptionBadge | UNAuthorizationOptionSound | UNAuthorizationOptionAlert) completionHandler:^(BOOL granted, NSError * _Nullable error) &#123;</div><div class=\"line\">        if (!error) &#123;</div><div class=\"line\">            NSLog(@&quot;request authorization succeeded!&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Notification-settings\"><a href=\"#Notification-settings\" class=\"headerlink\" title=\"Notification settings\"></a>Notification settings</h5><p>之前注册推送服务，用户点击了同意还是不同意，以及用户之后又做了怎样的更改我们都无从得知，现在 apple 开放了这个 API，我们可以直接获取到用户的设定信息了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) &#123;</div><div class=\"line\">        NSLog(@&quot;%@&quot;,settings);</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure></p>\n<p>打印获得如下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;UNNotificationSettings: 0x16567310; </div><div class=\"line\">authorizationStatus: Authorized, </div><div class=\"line\">notificationCenterSetting: Enabled, </div><div class=\"line\">soundSetting: Enabled, </div><div class=\"line\">badgeSetting: Enabled, </div><div class=\"line\">lockScreenSetting: Enabled, </div><div class=\"line\">alertSetting: NotSupported,</div><div class=\"line\">carPlaySetting: Enabled, </div><div class=\"line\">alertStyle: Banner&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Token-Registration\"><a href=\"#Token-Registration\" class=\"headerlink\" title=\"Token Registration\"></a>Token Registration</h5><p>跟之前一样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[UIApplication sharedApplication] registerForRemoteNotifications];</div></pre></td></tr></table></figure></p>\n<h5 id=\"Content\"><a href=\"#Content\" class=\"headerlink\" title=\"Content\"></a>Content</h5><p>以前只能展示一条文字，现在可以有 title 、subtitle 以及 body 了。<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-9095e97331a18015.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>定制方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Local Notification</div><div class=\"line\">UNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];</div><div class=\"line\">content.title = @&quot;Introduction to Notifications&quot;;</div><div class=\"line\">content.subtitle = @&quot;Session 707&quot;;</div><div class=\"line\">content.body = @&quot;Woah! These new notifications look amazing! Don’t you agree?&quot;;</div><div class=\"line\">content.badge = @1;</div><div class=\"line\"></div><div class=\"line\">//Remote Notification</div><div class=\"line\">&#123;</div><div class=\"line\">&quot;aps&quot; : &#123;</div><div class=\"line\">    &quot;alert&quot; : &#123; </div><div class=\"line\">         &quot;title&quot; : &quot;Introduction to Notifications&quot;, </div><div class=\"line\">         &quot;subtitle&quot; : &quot;Session 707&quot;,         </div><div class=\"line\">         &quot;body&quot; : &quot;Woah! These new notifications look amazing! Don’t you agree?&quot;</div><div class=\"line\">                &#125;,</div><div class=\"line\">    &quot;badge&quot; : 1</div><div class=\"line\">        &#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Triggers\"><a href=\"#Triggers\" class=\"headerlink\" title=\"Triggers\"></a>Triggers</h5><p>又是一个新的功能，有三种</p>\n<ul>\n<li>UNTimeIntervalNotificationTrigger</li>\n<li>UNCalendarNotificationTrigger</li>\n<li>UNLocationNotificationTrigger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">//2 分钟后提醒</div><div class=\"line\">UNTimeIntervalNotificationTrigger *trigger1 = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:120 repeats:NO];</div><div class=\"line\"></div><div class=\"line\">//每小时重复 1 次喊我喝水</div><div class=\"line\">UNTimeIntervalNotificationTrigger *trigger2 = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:3600 repeats:YES];</div><div class=\"line\"></div><div class=\"line\">//每周一早上 8：00 提醒我给老婆做早饭</div><div class=\"line\">NSDateComponents *components = [[NSDateComponents alloc] init];</div><div class=\"line\">components.weekday = 2;</div><div class=\"line\">components.hour = 8;</div><div class=\"line\">UNCalendarNotificationTrigger *trigger3 = [UNCalendarNotificationTrigger triggerWithDateMatchingComponents:components repeats:YES];</div><div class=\"line\"></div><div class=\"line\">//#import &lt;CoreLocation/CoreLocation.h&gt;</div><div class=\"line\">//一到麦当劳就喊我下车</div><div class=\"line\">CLRegion *region = [[CLRegion alloc] init];</div><div class=\"line\">UNLocationNotificationTrigger *trigger4 = [UNLocationNotificationTrigger triggerWithRegion:region repeats:NO];</div></pre></td></tr></table></figure>\n<h5 id=\"Add-Request\"><a href=\"#Add-Request\" class=\"headerlink\" title=\"Add Request\"></a>Add Request</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *requestIdentifier = @&quot;sampleRequest&quot;;</div><div class=\"line\">UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifier</div><div class=\"line\">                                                                          content:content</div><div class=\"line\">                                                                          trigger:trigger1];</div><div class=\"line\">[center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<h4 id=\"推送小结\"><a href=\"#推送小结\" class=\"headerlink\" title=\"推送小结\"></a>推送小结</h4><p>然后整个推送的过程就变成了酱紫：<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-2e8ba5a7369e65c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ul>\n<li>Local Notifications 通过定义 <code>Content</code> 和 <code>Trigger</code> 向  <code>UNUserNotificationCenter</code>  进行 <code>request</code> 这三部曲来实现。</li>\n<li>Remote Notifications 则向 <code>APNs</code> 发送 <code>Notification Payload</code> 。</li>\n</ul>\n<h5 id=\"Notification-Handling\"><a href=\"#Notification-Handling\" class=\"headerlink\" title=\"Notification Handling\"></a>Notification Handling</h5><p>设定了推送，然后就结束了？iOS 10 并没有这么简单！<br>通过实现协议，使 App 处于前台时捕捉并处理即将触发的推送：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface AppDelegate () &lt;UNUserNotificationCenterDelegate&gt;</div><div class=\"line\"></div><div class=\"line\">-(void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler&#123;</div><div class=\"line\"></div><div class=\"line\">    completionHandler(UNNotificationPresentationOptionAlert | UNNotificationPresentationOptionSound);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>让它只显示 alert 和 sound ,而忽略 badge 。</p>\n<h5 id=\"Notification-Management\"><a href=\"#Notification-Management\" class=\"headerlink\" title=\"Notification Management\"></a>Notification Management</h5><p>彻底掌控整个推送周期：</p>\n<ul>\n<li>Local Notification 通过更新 request</li>\n<li>Remote Notification 通过新的字段 <code>apns-collapse-id</code></li>\n</ul>\n<p>通过之前的 <code>addNotificationRequest:</code> 方法，在 <code>id</code> 不变的情况下重新添加，就可以刷新原有的推送。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *requestIdentifier = @&quot;sampleRequest&quot;;</div><div class=\"line\">UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifier</div><div class=\"line\">                                                                      content:newContent</div><div class=\"line\">                                                                      trigger:newTrigger1];</div><div class=\"line\">[center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>删除计划的推送：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[center removePendingNotificationRequestsWithIdentifiers:@[requestIdentifier]];</div></pre></td></tr></table></figure></p>\n<p>此外 <code>UNUserNotificationCenter.h</code> 中还有诸如<strong>删除所有推送、查看已经发出的推送、删除已经发出的推送</strong>等等强大的接口。</p>\n<p>刷新原有的推送后，在通知中心的显示里，也会有相应的变化，这里注意第 2 条信息，现在比分是 1：0<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-eb0de20d1c45e72a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>比分刷新后为 1：1，在不产生新的推送条目的情况下位置被前置了！<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-80d798dfdb57866c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>试想利用这个方法，不断的刷新推送，是不是就可以做到让自己 App 的推送内容始终展示在用户手机通知中心的最顶端，力压其余所有内容了呢？总感觉有点不厚道啊~</p>\n<h2 id=\"Advanced-Notifications\"><a href=\"#Advanced-Notifications\" class=\"headerlink\" title=\"Advanced Notifications\"></a>Advanced Notifications</h2><hr>\n<p>关于推送的更多类似 <code>Media Attachments</code> 的高级功能，我们将在下一篇里详细讨论。</p>\n<h5 id=\"Media-Attachments\"><a href=\"#Media-Attachments\" class=\"headerlink\" title=\"Media Attachments\"></a>Media Attachments</h5><p>为推送添加更多媒体附件，诸如图片、音乐<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-abb5d92e6abf6c81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"实现 iOS 前台时的推送弹窗效果","date":"2016-07-25T09:11:38.000Z","_content":" 或许很多童鞋还不知道，在 iOS 中收到推送通知时，如果 App 处于前台运行的情况下，推送的顶部弹窗是不会弹出来的。\n\n然而就是有很多`**`的产品经理都会提出类似这样的`**`需求：\n那就是在 App 处于前台时一样要弹出推送的窗口，而且还要能点击，能跳转到指定页面，甚至这一需求还涉及到了产品的核心功能。\n\n今天 Pikacode 就跟大家分享一下自己写的小插件，仅仅只需 1、2 行代码，即可搞定这一需求。\n\nGithub: [https://github.com/Yasashi/EBForeNotification](https://github.com/Yasashi/EBForeNotification)\n\n# EBForeNotification\n---\n在 App 处于前台时展示跟系统完全一样的推送`弹窗`和`声音`。获取推送内容，并且处理点击事件。\n\n支持 iOS 7~10 beta，支持`模拟器`和`真机`运行。\n\n## 效果\n\n实际效果如下：\n\n![](https://github.com/Yasashi/EBForeNotification/raw/master/screenshot/screenshot01.gif)\n\n![](https://github.com/Yasashi/EBForeNotification/raw/master/screenshot/screenshot02.gif)\n\n- 跟系统推送弹窗 UI 效果完全相同\n- 可以自动获取 App 的`应用名称`，`应用图标`\n- 弹窗时会自动隐藏系统状态栏、收起后自动显示系统状态栏\n- 自带推送声音\n- `时间`及下方`收拉条`的颜色跟当前页面的背景颜色相同\n- 自带`点击事件`，点击可获取推送内容，进行相应页面跳转\n- 自带`上滑手势`，快速收起\n- 自动在处于最前端的 controller 上进行弹窗\n\n## 安装\n1. 下载并`在 Xcode 中` `拖拽拷贝` `EBForeNotification` 文件夹至 Xcode 工程。\n2. `targets` --> `Build Settings` --> `搜 other link` --> `添加 -ObjC`。\n![](http://upload-images.jianshu.io/upload_images/1944178-b226f19caf3ed3b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 本地弹窗\n在任意方法内调用以下任 1 行代码即可弹窗\n```objc\n#import \"EBForeNotification.h\"\n{...\n//普通弹窗(系统声音)\n[EBForeNotification handleRemoteNotification:@{@\"aps\":@{@\"alert\":@\"展示内容\"}} soundID:1312];\n\n//普通弹窗(指定声音文件)\n[EBForeNotification handleRemoteNotification:@{@\"aps\":@{@\"alert\":@\"展示内容\"}} customSound:@\"my_sound.wav\"];\n\n//带自定义参数的弹窗(系统声音)\n[EBForeNotification handleRemoteNotification:@{@\"aps\":@{@\"alert\":@\"展示内容\"}, @\"key1\":@\"value1\", @\"key2\":@\"value2\"} soundID:1312];\n\n//普通弹窗(指定声音文件)\n[EBForeNotification handleRemoteNotification:@{@\"aps\":@{@\"alert\":@\"展示内容\"}, @\"key1\":@\"value1\", @\"key2\":@\"value2\"} customSound:@\"my_sound.wav\"];\n...}\n```\n\n\n## 接收远程/本地推送后弹窗\n接收远程/本地推送后，自动在前台展示推送弹窗及声音。\n在 `AppDelegate.m` 中添加代码\n\n```objc\n//AppDelegate.m\n#import \"EBForeNotification.h\"\n\n//ios7 before\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo { \n\t...\n\t//系统声音弹窗\n    [EBForeNotification handleRemoteNotification:userInfo soundID:1312];\n    \n    //指定声音文件弹窗\n\t[EBForeNotification handleRemoteNotification:userInfo customSound:@\"my_sound.wav\"];\n    ...\n}\n\n//ios7 later  \n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {    \n\t...\n\t//系统声音弹窗\n    [EBForeNotification handleRemoteNotification:userInfo soundID:1312];\n    \n    //指定声音文件弹窗\n\t[EBForeNotification handleRemoteNotification:userInfo customSound:@\"my_sound.wav\"];\n    ...\n    completionHandler(UIBackgroundFetchResultNewData);\n}\n```\n\n## soundID 参数\niOS 系统自带的声音 id，系统级的推送服务默认使用的是`三全音`，id = 1312\n\n其他系统声音 id 可以在这里查询到 [iOS Predefined sounds](http://iphonedevwiki.net/index.php/AudioServices#)\n备用地址 [AudioServices sounds](http://www.cocoachina.com/bbs/read.php?tid=134344)\n\n## 监听并处理点击事件\n添加 `Observer` 监听 `EBBannerViewDidClick`，获取推送内容，通过推送时自定义的字段处理自己逻辑，如：跳转到对应页面等。\n\n接收到的推送内容类似以下：\n\n```\n{\n    \"aps\":\n    {\n        \"alert\":\"推送内容\",\n        \"sound\":\"sound\",\n        \"badge\":\"3\"\n    },\n        \"key1\":\"跳转页面1\"  //自定义此字段以跳转到相应页面\n}\n```\n\n添加 `Observer` 获取自定义的字段，并处理：\n\n```objc\n#import \"EBForeNotification.h\"\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(eBBannerViewDidClick:) name:EBBannerViewDidClick object:nil];\n-(void)eBBannerViewDidClick:(NSNotification*)noti{\n    if(noti[@\"key1\" == @\"跳转页面1\"]){\n        //跳转到页面1\n    }\n}\n```","source":"_posts/4.实现 iOS 前台时的推送弹窗效果.md","raw":"---\ntitle: 实现 iOS 前台时的推送弹窗效果\ndate: 2016.07.25 17:11:38\ntags:\n\t- Push Notification\ncategories:\n\t- Push Notification\n---\n 或许很多童鞋还不知道，在 iOS 中收到推送通知时，如果 App 处于前台运行的情况下，推送的顶部弹窗是不会弹出来的。\n\n然而就是有很多`**`的产品经理都会提出类似这样的`**`需求：\n那就是在 App 处于前台时一样要弹出推送的窗口，而且还要能点击，能跳转到指定页面，甚至这一需求还涉及到了产品的核心功能。\n\n今天 Pikacode 就跟大家分享一下自己写的小插件，仅仅只需 1、2 行代码，即可搞定这一需求。\n\nGithub: [https://github.com/Yasashi/EBForeNotification](https://github.com/Yasashi/EBForeNotification)\n\n# EBForeNotification\n---\n在 App 处于前台时展示跟系统完全一样的推送`弹窗`和`声音`。获取推送内容，并且处理点击事件。\n\n支持 iOS 7~10 beta，支持`模拟器`和`真机`运行。\n\n## 效果\n\n实际效果如下：\n\n![](https://github.com/Yasashi/EBForeNotification/raw/master/screenshot/screenshot01.gif)\n\n![](https://github.com/Yasashi/EBForeNotification/raw/master/screenshot/screenshot02.gif)\n\n- 跟系统推送弹窗 UI 效果完全相同\n- 可以自动获取 App 的`应用名称`，`应用图标`\n- 弹窗时会自动隐藏系统状态栏、收起后自动显示系统状态栏\n- 自带推送声音\n- `时间`及下方`收拉条`的颜色跟当前页面的背景颜色相同\n- 自带`点击事件`，点击可获取推送内容，进行相应页面跳转\n- 自带`上滑手势`，快速收起\n- 自动在处于最前端的 controller 上进行弹窗\n\n## 安装\n1. 下载并`在 Xcode 中` `拖拽拷贝` `EBForeNotification` 文件夹至 Xcode 工程。\n2. `targets` --> `Build Settings` --> `搜 other link` --> `添加 -ObjC`。\n![](http://upload-images.jianshu.io/upload_images/1944178-b226f19caf3ed3b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 本地弹窗\n在任意方法内调用以下任 1 行代码即可弹窗\n```objc\n#import \"EBForeNotification.h\"\n{...\n//普通弹窗(系统声音)\n[EBForeNotification handleRemoteNotification:@{@\"aps\":@{@\"alert\":@\"展示内容\"}} soundID:1312];\n\n//普通弹窗(指定声音文件)\n[EBForeNotification handleRemoteNotification:@{@\"aps\":@{@\"alert\":@\"展示内容\"}} customSound:@\"my_sound.wav\"];\n\n//带自定义参数的弹窗(系统声音)\n[EBForeNotification handleRemoteNotification:@{@\"aps\":@{@\"alert\":@\"展示内容\"}, @\"key1\":@\"value1\", @\"key2\":@\"value2\"} soundID:1312];\n\n//普通弹窗(指定声音文件)\n[EBForeNotification handleRemoteNotification:@{@\"aps\":@{@\"alert\":@\"展示内容\"}, @\"key1\":@\"value1\", @\"key2\":@\"value2\"} customSound:@\"my_sound.wav\"];\n...}\n```\n\n\n## 接收远程/本地推送后弹窗\n接收远程/本地推送后，自动在前台展示推送弹窗及声音。\n在 `AppDelegate.m` 中添加代码\n\n```objc\n//AppDelegate.m\n#import \"EBForeNotification.h\"\n\n//ios7 before\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo { \n\t...\n\t//系统声音弹窗\n    [EBForeNotification handleRemoteNotification:userInfo soundID:1312];\n    \n    //指定声音文件弹窗\n\t[EBForeNotification handleRemoteNotification:userInfo customSound:@\"my_sound.wav\"];\n    ...\n}\n\n//ios7 later  \n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {    \n\t...\n\t//系统声音弹窗\n    [EBForeNotification handleRemoteNotification:userInfo soundID:1312];\n    \n    //指定声音文件弹窗\n\t[EBForeNotification handleRemoteNotification:userInfo customSound:@\"my_sound.wav\"];\n    ...\n    completionHandler(UIBackgroundFetchResultNewData);\n}\n```\n\n## soundID 参数\niOS 系统自带的声音 id，系统级的推送服务默认使用的是`三全音`，id = 1312\n\n其他系统声音 id 可以在这里查询到 [iOS Predefined sounds](http://iphonedevwiki.net/index.php/AudioServices#)\n备用地址 [AudioServices sounds](http://www.cocoachina.com/bbs/read.php?tid=134344)\n\n## 监听并处理点击事件\n添加 `Observer` 监听 `EBBannerViewDidClick`，获取推送内容，通过推送时自定义的字段处理自己逻辑，如：跳转到对应页面等。\n\n接收到的推送内容类似以下：\n\n```\n{\n    \"aps\":\n    {\n        \"alert\":\"推送内容\",\n        \"sound\":\"sound\",\n        \"badge\":\"3\"\n    },\n        \"key1\":\"跳转页面1\"  //自定义此字段以跳转到相应页面\n}\n```\n\n添加 `Observer` 获取自定义的字段，并处理：\n\n```objc\n#import \"EBForeNotification.h\"\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(eBBannerViewDidClick:) name:EBBannerViewDidClick object:nil];\n-(void)eBBannerViewDidClick:(NSNotification*)noti{\n    if(noti[@\"key1\" == @\"跳转页面1\"]){\n        //跳转到页面1\n    }\n}\n```","slug":"4.实现 iOS 前台时的推送弹窗效果","published":1,"updated":"2016-08-30T08:21:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisk6ki7s0007sbbdnp47iewr","content":"<p> 或许很多童鞋还不知道，在 iOS 中收到推送通知时，如果 App 处于前台运行的情况下，推送的顶部弹窗是不会弹出来的。</p>\n<p>然而就是有很多<code>**</code>的产品经理都会提出类似这样的<code>**</code>需求：<br>那就是在 App 处于前台时一样要弹出推送的窗口，而且还要能点击，能跳转到指定页面，甚至这一需求还涉及到了产品的核心功能。</p>\n<p>今天 Pikacode 就跟大家分享一下自己写的小插件，仅仅只需 1、2 行代码，即可搞定这一需求。</p>\n<p>Github: <a href=\"https://github.com/Yasashi/EBForeNotification\" target=\"_blank\" rel=\"external\">https://github.com/Yasashi/EBForeNotification</a></p>\n<h1 id=\"EBForeNotification\"><a href=\"#EBForeNotification\" class=\"headerlink\" title=\"EBForeNotification\"></a>EBForeNotification</h1><hr>\n<p>在 App 处于前台时展示跟系统完全一样的推送<code>弹窗</code>和<code>声音</code>。获取推送内容，并且处理点击事件。</p>\n<p>支持 iOS 7~10 beta，支持<code>模拟器</code>和<code>真机</code>运行。</p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>实际效果如下：</p>\n<p><img src=\"https://github.com/Yasashi/EBForeNotification/raw/master/screenshot/screenshot01.gif\" alt=\"\"></p>\n<p><img src=\"https://github.com/Yasashi/EBForeNotification/raw/master/screenshot/screenshot02.gif\" alt=\"\"></p>\n<ul>\n<li>跟系统推送弹窗 UI 效果完全相同</li>\n<li>可以自动获取 App 的<code>应用名称</code>，<code>应用图标</code></li>\n<li>弹窗时会自动隐藏系统状态栏、收起后自动显示系统状态栏</li>\n<li>自带推送声音</li>\n<li><code>时间</code>及下方<code>收拉条</code>的颜色跟当前页面的背景颜色相同</li>\n<li>自带<code>点击事件</code>，点击可获取推送内容，进行相应页面跳转</li>\n<li>自带<code>上滑手势</code>，快速收起</li>\n<li>自动在处于最前端的 controller 上进行弹窗</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>下载并<code>在 Xcode 中</code> <code>拖拽拷贝</code> <code>EBForeNotification</code> 文件夹至 Xcode 工程。</li>\n<li><code>targets</code> –&gt; <code>Build Settings</code> –&gt; <code>搜 other link</code> –&gt; <code>添加 -ObjC</code>。<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-b226f19caf3ed3b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></li>\n</ol>\n<h2 id=\"本地弹窗\"><a href=\"#本地弹窗\" class=\"headerlink\" title=\"本地弹窗\"></a>本地弹窗</h2><p>在任意方法内调用以下任 1 行代码即可弹窗<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"EBForeNotification.h\"</span></span></div><div class=\"line\">&#123;...</div><div class=\"line\"><span class=\"comment\">//普通弹窗(系统声音)</span></div><div class=\"line\">[EBForeNotification handleRemoteNotification:@&#123;<span class=\"string\">@\"aps\"</span>:@&#123;<span class=\"string\">@\"alert\"</span>:<span class=\"string\">@\"展示内容\"</span>&#125;&#125; soundID:<span class=\"number\">1312</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//普通弹窗(指定声音文件)</span></div><div class=\"line\">[EBForeNotification handleRemoteNotification:@&#123;<span class=\"string\">@\"aps\"</span>:@&#123;<span class=\"string\">@\"alert\"</span>:<span class=\"string\">@\"展示内容\"</span>&#125;&#125; customSound:<span class=\"string\">@\"my_sound.wav\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//带自定义参数的弹窗(系统声音)</span></div><div class=\"line\">[EBForeNotification handleRemoteNotification:@&#123;<span class=\"string\">@\"aps\"</span>:@&#123;<span class=\"string\">@\"alert\"</span>:<span class=\"string\">@\"展示内容\"</span>&#125;, <span class=\"string\">@\"key1\"</span>:<span class=\"string\">@\"value1\"</span>, <span class=\"string\">@\"key2\"</span>:<span class=\"string\">@\"value2\"</span>&#125; soundID:<span class=\"number\">1312</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//普通弹窗(指定声音文件)</span></div><div class=\"line\">[EBForeNotification handleRemoteNotification:@&#123;<span class=\"string\">@\"aps\"</span>:@&#123;<span class=\"string\">@\"alert\"</span>:<span class=\"string\">@\"展示内容\"</span>&#125;, <span class=\"string\">@\"key1\"</span>:<span class=\"string\">@\"value1\"</span>, <span class=\"string\">@\"key2\"</span>:<span class=\"string\">@\"value2\"</span>&#125; customSound:<span class=\"string\">@\"my_sound.wav\"</span>];</div><div class=\"line\">...&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"接收远程-本地推送后弹窗\"><a href=\"#接收远程-本地推送后弹窗\" class=\"headerlink\" title=\"接收远程/本地推送后弹窗\"></a>接收远程/本地推送后弹窗</h2><p>接收远程/本地推送后，自动在前台展示推送弹窗及声音。<br>在 <code>AppDelegate.m</code> 中添加代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//AppDelegate.m</span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"EBForeNotification.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ios7 before</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didReceiveRemoteNotification:(<span class=\"built_in\">NSDictionary</span> *)userInfo &#123; </div><div class=\"line\">\t...</div><div class=\"line\">\t<span class=\"comment\">//系统声音弹窗</span></div><div class=\"line\">    [EBForeNotification handleRemoteNotification:userInfo soundID:<span class=\"number\">1312</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//指定声音文件弹窗</span></div><div class=\"line\">\t[EBForeNotification handleRemoteNotification:userInfo customSound:<span class=\"string\">@\"my_sound.wav\"</span>];</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ios7 later  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didReceiveRemoteNotification:(<span class=\"built_in\">NSDictionary</span> *)userInfo fetchCompletionHandler:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">UIBackgroundFetchResult</span>))completionHandler &#123;    </div><div class=\"line\">\t...</div><div class=\"line\">\t<span class=\"comment\">//系统声音弹窗</span></div><div class=\"line\">    [EBForeNotification handleRemoteNotification:userInfo soundID:<span class=\"number\">1312</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//指定声音文件弹窗</span></div><div class=\"line\">\t[EBForeNotification handleRemoteNotification:userInfo customSound:<span class=\"string\">@\"my_sound.wav\"</span>];</div><div class=\"line\">    ...</div><div class=\"line\">    completionHandler(<span class=\"built_in\">UIBackgroundFetchResultNewData</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"soundID-参数\"><a href=\"#soundID-参数\" class=\"headerlink\" title=\"soundID 参数\"></a>soundID 参数</h2><p>iOS 系统自带的声音 id，系统级的推送服务默认使用的是<code>三全音</code>，id = 1312</p>\n<p>其他系统声音 id 可以在这里查询到 <a href=\"http://iphonedevwiki.net/index.php/AudioServices#\" target=\"_blank\" rel=\"external\">iOS Predefined sounds</a><br>备用地址 <a href=\"http://www.cocoachina.com/bbs/read.php?tid=134344\" target=\"_blank\" rel=\"external\">AudioServices sounds</a></p>\n<h2 id=\"监听并处理点击事件\"><a href=\"#监听并处理点击事件\" class=\"headerlink\" title=\"监听并处理点击事件\"></a>监听并处理点击事件</h2><p>添加 <code>Observer</code> 监听 <code>EBBannerViewDidClick</code>，获取推送内容，通过推送时自定义的字段处理自己逻辑，如：跳转到对应页面等。</p>\n<p>接收到的推送内容类似以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;aps&quot;:</div><div class=\"line\">    &#123;</div><div class=\"line\">        &quot;alert&quot;:&quot;推送内容&quot;,</div><div class=\"line\">        &quot;sound&quot;:&quot;sound&quot;,</div><div class=\"line\">        &quot;badge&quot;:&quot;3&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">        &quot;key1&quot;:&quot;跳转页面1&quot;  //自定义此字段以跳转到相应页面</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>添加 <code>Observer</code> 获取自定义的字段，并处理：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"EBForeNotification.h\"</span></span></div><div class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(eBBannerViewDidClick:) name:EBBannerViewDidClick object:<span class=\"literal\">nil</span>];</div><div class=\"line\">-(<span class=\"keyword\">void</span>)eBBannerViewDidClick:(<span class=\"built_in\">NSNotification</span>*)noti&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(noti[<span class=\"string\">@\"key1\"</span> == <span class=\"string\">@\"跳转页面1\"</span>])&#123;</div><div class=\"line\">        <span class=\"comment\">//跳转到页面1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p> 或许很多童鞋还不知道，在 iOS 中收到推送通知时，如果 App 处于前台运行的情况下，推送的顶部弹窗是不会弹出来的。</p>\n<p>然而就是有很多<code>**</code>的产品经理都会提出类似这样的<code>**</code>需求：<br>那就是在 App 处于前台时一样要弹出推送的窗口，而且还要能点击，能跳转到指定页面，甚至这一需求还涉及到了产品的核心功能。</p>\n<p>今天 Pikacode 就跟大家分享一下自己写的小插件，仅仅只需 1、2 行代码，即可搞定这一需求。</p>\n<p>Github: <a href=\"https://github.com/Yasashi/EBForeNotification\">https://github.com/Yasashi/EBForeNotification</a></p>\n<h1 id=\"EBForeNotification\"><a href=\"#EBForeNotification\" class=\"headerlink\" title=\"EBForeNotification\"></a>EBForeNotification</h1><hr>\n<p>在 App 处于前台时展示跟系统完全一样的推送<code>弹窗</code>和<code>声音</code>。获取推送内容，并且处理点击事件。</p>\n<p>支持 iOS 7~10 beta，支持<code>模拟器</code>和<code>真机</code>运行。</p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>实际效果如下：</p>\n<p><img src=\"https://github.com/Yasashi/EBForeNotification/raw/master/screenshot/screenshot01.gif\" alt=\"\"></p>\n<p><img src=\"https://github.com/Yasashi/EBForeNotification/raw/master/screenshot/screenshot02.gif\" alt=\"\"></p>\n<ul>\n<li>跟系统推送弹窗 UI 效果完全相同</li>\n<li>可以自动获取 App 的<code>应用名称</code>，<code>应用图标</code></li>\n<li>弹窗时会自动隐藏系统状态栏、收起后自动显示系统状态栏</li>\n<li>自带推送声音</li>\n<li><code>时间</code>及下方<code>收拉条</code>的颜色跟当前页面的背景颜色相同</li>\n<li>自带<code>点击事件</code>，点击可获取推送内容，进行相应页面跳转</li>\n<li>自带<code>上滑手势</code>，快速收起</li>\n<li>自动在处于最前端的 controller 上进行弹窗</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>下载并<code>在 Xcode 中</code> <code>拖拽拷贝</code> <code>EBForeNotification</code> 文件夹至 Xcode 工程。</li>\n<li><code>targets</code> –&gt; <code>Build Settings</code> –&gt; <code>搜 other link</code> –&gt; <code>添加 -ObjC</code>。<br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-b226f19caf3ed3b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></li>\n</ol>\n<h2 id=\"本地弹窗\"><a href=\"#本地弹窗\" class=\"headerlink\" title=\"本地弹窗\"></a>本地弹窗</h2><p>在任意方法内调用以下任 1 行代码即可弹窗<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"EBForeNotification.h\"</span></span></div><div class=\"line\">&#123;...</div><div class=\"line\"><span class=\"comment\">//普通弹窗(系统声音)</span></div><div class=\"line\">[EBForeNotification handleRemoteNotification:@&#123;<span class=\"string\">@\"aps\"</span>:@&#123;<span class=\"string\">@\"alert\"</span>:<span class=\"string\">@\"展示内容\"</span>&#125;&#125; soundID:<span class=\"number\">1312</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//普通弹窗(指定声音文件)</span></div><div class=\"line\">[EBForeNotification handleRemoteNotification:@&#123;<span class=\"string\">@\"aps\"</span>:@&#123;<span class=\"string\">@\"alert\"</span>:<span class=\"string\">@\"展示内容\"</span>&#125;&#125; customSound:<span class=\"string\">@\"my_sound.wav\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//带自定义参数的弹窗(系统声音)</span></div><div class=\"line\">[EBForeNotification handleRemoteNotification:@&#123;<span class=\"string\">@\"aps\"</span>:@&#123;<span class=\"string\">@\"alert\"</span>:<span class=\"string\">@\"展示内容\"</span>&#125;, <span class=\"string\">@\"key1\"</span>:<span class=\"string\">@\"value1\"</span>, <span class=\"string\">@\"key2\"</span>:<span class=\"string\">@\"value2\"</span>&#125; soundID:<span class=\"number\">1312</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//普通弹窗(指定声音文件)</span></div><div class=\"line\">[EBForeNotification handleRemoteNotification:@&#123;<span class=\"string\">@\"aps\"</span>:@&#123;<span class=\"string\">@\"alert\"</span>:<span class=\"string\">@\"展示内容\"</span>&#125;, <span class=\"string\">@\"key1\"</span>:<span class=\"string\">@\"value1\"</span>, <span class=\"string\">@\"key2\"</span>:<span class=\"string\">@\"value2\"</span>&#125; customSound:<span class=\"string\">@\"my_sound.wav\"</span>];</div><div class=\"line\">...&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"接收远程-本地推送后弹窗\"><a href=\"#接收远程-本地推送后弹窗\" class=\"headerlink\" title=\"接收远程/本地推送后弹窗\"></a>接收远程/本地推送后弹窗</h2><p>接收远程/本地推送后，自动在前台展示推送弹窗及声音。<br>在 <code>AppDelegate.m</code> 中添加代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//AppDelegate.m</span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"EBForeNotification.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ios7 before</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didReceiveRemoteNotification:(<span class=\"built_in\">NSDictionary</span> *)userInfo &#123; </div><div class=\"line\">\t...</div><div class=\"line\">\t<span class=\"comment\">//系统声音弹窗</span></div><div class=\"line\">    [EBForeNotification handleRemoteNotification:userInfo soundID:<span class=\"number\">1312</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//指定声音文件弹窗</span></div><div class=\"line\">\t[EBForeNotification handleRemoteNotification:userInfo customSound:<span class=\"string\">@\"my_sound.wav\"</span>];</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ios7 later  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didReceiveRemoteNotification:(<span class=\"built_in\">NSDictionary</span> *)userInfo fetchCompletionHandler:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">UIBackgroundFetchResult</span>))completionHandler &#123;    </div><div class=\"line\">\t...</div><div class=\"line\">\t<span class=\"comment\">//系统声音弹窗</span></div><div class=\"line\">    [EBForeNotification handleRemoteNotification:userInfo soundID:<span class=\"number\">1312</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//指定声音文件弹窗</span></div><div class=\"line\">\t[EBForeNotification handleRemoteNotification:userInfo customSound:<span class=\"string\">@\"my_sound.wav\"</span>];</div><div class=\"line\">    ...</div><div class=\"line\">    completionHandler(<span class=\"built_in\">UIBackgroundFetchResultNewData</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"soundID-参数\"><a href=\"#soundID-参数\" class=\"headerlink\" title=\"soundID 参数\"></a>soundID 参数</h2><p>iOS 系统自带的声音 id，系统级的推送服务默认使用的是<code>三全音</code>，id = 1312</p>\n<p>其他系统声音 id 可以在这里查询到 <a href=\"http://iphonedevwiki.net/index.php/AudioServices#\">iOS Predefined sounds</a><br>备用地址 <a href=\"http://www.cocoachina.com/bbs/read.php?tid=134344\">AudioServices sounds</a></p>\n<h2 id=\"监听并处理点击事件\"><a href=\"#监听并处理点击事件\" class=\"headerlink\" title=\"监听并处理点击事件\"></a>监听并处理点击事件</h2><p>添加 <code>Observer</code> 监听 <code>EBBannerViewDidClick</code>，获取推送内容，通过推送时自定义的字段处理自己逻辑，如：跳转到对应页面等。</p>\n<p>接收到的推送内容类似以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;aps&quot;:</div><div class=\"line\">    &#123;</div><div class=\"line\">        &quot;alert&quot;:&quot;推送内容&quot;,</div><div class=\"line\">        &quot;sound&quot;:&quot;sound&quot;,</div><div class=\"line\">        &quot;badge&quot;:&quot;3&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">        &quot;key1&quot;:&quot;跳转页面1&quot;  //自定义此字段以跳转到相应页面</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>添加 <code>Observer</code> 获取自定义的字段，并处理：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"EBForeNotification.h\"</span></span></div><div class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(eBBannerViewDidClick:) name:EBBannerViewDidClick object:<span class=\"literal\">nil</span>];</div><div class=\"line\">-(<span class=\"keyword\">void</span>)eBBannerViewDidClick:(<span class=\"built_in\">NSNotification</span>*)noti&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(noti[<span class=\"string\">@\"key1\"</span> == <span class=\"string\">@\"跳转页面1\"</span>])&#123;</div><div class=\"line\">        <span class=\"comment\">//跳转到页面1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"iOS 推送全解析，你不得不知的所有 Tips！","date":"2016-08-31T07:45:58.000Z","_content":" `推送服务` 可以说是所有 App 的标配，不论是哪种类型的 App，推送都从很大程度上决定了 App 的 `打开率、使用率、存活率` 。因此，熟知并掌握推送原理及方法，对每一个开发者来说都是必备技能，对每一个依赖 App 的公司来说都至关重要。\n\n从 iOS 10 新增的 `UserNotifications Framework` 可以发现，Apple 整合了原有散乱的 API，并且增加了许多强大的功能。以 Apple 官方的角度来看，也必然是相当重视推送服务对 App 的影响、以及对 Apple 生态圈长远发展的影响。\n\n本文旨在跟大家分享使用 iOS 推送的一些经验，欢迎互相交流，指出错漏之处。因为内容较多，有些地方可能稍显杂乱。（以下 `推送` 均指 `iOS 推送` ）\n\n# 准备篇\n---\n\n#### Tip 1：推送 `必须` 购买 Apple 开发者账号，并使用特定的 `推送证书`\n- 使用免费帐号不能推送\n- 那如果我们使用的是第三方推送服务（以下简称 `第三方` ）呢？比如「极光推送」。也必须购买开发者帐号。因为所有的第三方都会将推送请求发至 APNs（Apple Push Notification service 苹果推送通知服务），所有推送均是由 APNs 下发。\n- 如何注册及正确的配置证书，参考这里 [iOS 证书设置指南](http://docs.jiguang.cn/client/ios_tutorials/#ios_1)\n\n\n# 原理篇\n---\n\n#### Tip 2：推送本身是 iOS 系统的行为，所以在 App 没有运行的时候：\n- 仍然能够推送及接收（通知中心通知、顶部弹窗、刷新 App 右上角的小圆点即 `badge` [以下简称 `角标`] 等都会由系统来控制和展示）\n- 收到推送时，是无法在 App 的代码中获取到推送内容的。因为沙盒机制，此时 App 的任何代码都不可能被执行\n\n#### Tip 3：手机向 APNs 注册推送服务\n1. 在代码中注册推送服务：\n```objc\n#ifdef __IPHONE_8_0\nif ([[UIApplication sharedApplication] respondsToSelector:@selector(registerUserNotificationSettings:)]) {\n        UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeBadge|UIUserNotificationTypeSound|UIUserNotificationTypeAlert categories:nil];\n        [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n} else {\n        UIRemoteNotificationType myTypes = UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound;\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:myTypes];\n}\n#else\n        UIRemoteNotificationType myTypes = UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound;\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:myTypes];\n#endif\n```\n2. 在第1次触发这段代码的时候，会有1个系统弹窗，询问你是否允许该 App 要给你推送信息。当你选择 `允许` 时，系统会打包 `App+手机唯一标识+证书` 信息发送至 APNs 服务器注册推送服务，APNs 系统会对该手机安装的该 App 是否有推送权限进行验证，所以必须要加入了 Apple Deveice 的手机，使用对应 App 的 `推送证书` 才能够成功的注册。\n3. 如果注册成功，则可以在 `AppDelegate.m` 的如下方法中获取到 `\n   deviceToken`，它是对 `该手机+该App` 组合的一个唯一标识，当使用远程推送时，只需将推送消息发给指定的 `deviceToken` 即可使推送信息传达给指定手机的指定 App 上。因此如果你使用第三方，就需要在这个方法里将 `deviceToken` 传给第三方。（在 iOS 9 为了更好的保护用户隐私，会出现多次重复删除/安装 App 导致 `deviceToken` 不断变化的情况）\n```objc\n-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {  \n      [JPUSHService registerDeviceToken:deviceToken];//将 deviceToken 传给极光推送\n}\n```\n4. 综上，注册及接收推送 `必须` 使用真机，`必须` 连网\n\n#### Tip 4：推送从 服务端 --> App 代码 的过程\n1. 使用你们公司或第三方的服务端向 APNs 发送推送请求（包含 `推送内容+App描述+手机描述` ）\n2. APNs 接收并验证推送请求\n3. APNs 利用网络搜索并定位指定设备，下发推送\n4. 手机收到推送，系统根据 App 状态进行处理\n- 前台收到：\n    - 系统会将推送内容传到 `didReceiveRemoteNotification`\n- 后台收到：\n    - 如果开启了 `Remote Notification` ，系统将推送传到 `didReceiveRemoteNotification:fetchCompletionHandler:`（见 Tip 5 - 后台推送）\n    - 展示弹窗、推送中心、声音、角标\n- 退出收到：\n    - 如果点击推送弹窗/通知中心而启动 App，系统将推送传到 `didFinishLaunchingWithOptions`\n    - 展示弹窗、推送中心、声音、角标\n\n\n# 推送内容篇\n---\n\n#### Tip 5：推送分为 本地/远程 2 种类型：\n- 本地推送，可指定推送时间，在该时间准时弹出推送通知\n- 远程推送，分为 `普通推送/后台推送/静默推送` 3 种类型。存在延迟问题（由于 Tip 1 第 2 点，APNs 的不稳定及高峰时段的巨量请求所致）\n  - 普通推送\n    - 就是我们在手机上平时见到的推送\n    - 包含声音、弹窗、角标、自定义字段\n    - App \n      - 处于前台，可通过 `didReceiveRemoteNotification` 获取推送内容\n      - 处于后台，无法获取推送内容\n      - 处于退出，无法获取推送内容\n      - 点击图标启动，无法获取推送内容\n      - 点击推送弹窗启动，在 `didFinishLaunchingWithOptions` 获取推送内容\n    - 推送内容类似如下：\n```json\n{\n        \"_j_msgid\" = 200806057;//第三方附带的 id，用于在后台查询送达情况\n        aps =     {\n          alert = \"显示内容\";\n          badge = 1;//App 角标，可推送 n、+n、-n 来实现角标的固定、增加、减少\n          sound = default;//推送声音，默认系统三全音，如需使用自己的声音，需要将声音文件拖拽&拷贝至 Xcode 工程目录任意位置，并在推送时指定其文件名\n        };\n        key1 = value1;//自定义字段，可设置多组，用于处理内部逻辑\n        key2 = value2;\n} \n```\n- 后台推送\n    - 各种显示效果跟普通推送完全一样\n    - 必须携带 `\"content-available\" = 1;`\n    - 必须携带 `alert`、`badge`、`sound` 中 `至少 1 个字段`\n    - 仅 iOS 7 以后支持\n    - 必须在 Xcode 工程中 `TARGETS - Capabilities - Background Modes - Remote notifications` 开启该功能，具体可参照 [iOS 7 Background Remote Notification](http://docs.jiguang.cn/client/ios_tutorials/#ios-7-background-remote-notification)\n    - App\n      - 处于前台，可通过 `didReceiveRemoteNotification` 获取推送内容\n      - 处于后台，可通过`didReceiveRemoteNotification:fetchCompletionHandler:` 获取推送内容//获取情况中与 `普通推送` 的唯一不同点，`此时 iOS 系统允许开发者在 App 处于后台的情况下，执行一些代码，大概提供几分钟的时间，可以用来偷偷的刷新 UI、切换页面、下载更新包等等操作`\n      - 处于退出，无法获取推送内容\n      - 点击图标启动，无法获取推送内容\n      - 点击推送弹窗启动，在 `didFinishLaunchingWithOptions` 获取推送内容\n- 推送内容类似如下：\n```json\n{\n        \"_j_msgid\" = 2090737306;\n          aps =     {\n          alert = \"显示内容\";\n          badge = 1;\n          \"content-available\" = 1;//必带字段\n          sound = default;\n        };\n        key1 = value1;\n}\n```\n- 静默推送\n    - 必须携带 `\"content-available\" = 1;`，因此静默`必然`是后台的\n    - 必须不携带 `alert`、`badge`、`sound`\n    - 可携带自定义字段\n    - 在用户完全不知情的情况下被 App `didReceiveRemoteNotification` 接收并处理（仅限 App 处于前台时，其他状态因没有任何提示，故无法被用户触发并被代码截获。）\n    - 推送内容类似如下：\n```json\n{\n        \"_j_msgid\" = 3938587719;\n        aps =     {\n          alert = \"\";\n          \"content-available\" = 1;//必带字段\n        };\n        key1 = value1;\n}\n```\n\n\n# 别名/标签篇\n---\n#### Tip 6：推送根据对象的不同可分为：\n- 广播\n  - 无差别发送给所有用户\n- 别名 `alias` 推送\n  - 1 个手机的 1 款 App 只能设置 1 个 alias（可修改）\n  - 用于指定一些基本属性，如男/女性用户\n  - 推送时可指定多个 alias 来下发同一内容\n  - 仅指定 alias 的用户能够收到推送\n- 标签 `tag` 推送\n  - 可设置多个、可增加、清空\n  - 用于指定多样的属性，如 `1000`+`daily`+`discount` 可用于表示 `月消费超过 1k`、`喜欢购买日用品`、`偏好折扣商品` 的用户\n  - 如果要 `删除`，需要在上次设置时，将设置的 tags 保存至 `NSUserDefaults`，本次剔除不需要的 tag 后，再重新设置\n  - 推送时可指定多个 tag 来下发同一内容\n  - 手机如果设置了推送指定的多个 tag 中 `任一个` tag，都能够收到推送消息。如指定 `1000`+`globe`+`original` （千元级消费者、`全球购`、原价），那么设置了 `100`+`globe`+`discount`（百元级消费者、`全球购`、折扣价）的用户可以收到该推送消息。\n- `Registration ID` 推送\n  - 在 Tip 3 的第 3 步时将 `deviceToken` 提供给第三方之后，其服务器会自动生成的指向该手机的唯一 `id`\n  - 可在推送时指定多个 id 来下发消息\n  - 可用于对 `核心用户`、`旗舰用户` 的 `精准推送`\n\n\n# 自定义消息篇\n---\n\n#### Tip 7：自定义消息（以下简称 `消息` ）和推送的区别，消息：\n- 不需要 Apple 推送证书\n- 由第三方的服务器下发，而不是 APNs\n- 相比推送，更快速，几乎没有延迟，可用于 IM 消息的即时送达\n- 通过长连接技术下发消息，因此\n  - 手机必须启动并与第三方服务器建立连接\n  - 如果手机启动立刻切至后台，很可能连接没有建立\n  - 手机必须处于前台才能收到消息\n  - 手机从后台切回前台，会自动重新建立连接，并收到离线消息\n- 没有任何展示（弹窗、通知中心、角标、声音），因此可以：\n  - 自定义字段实现 UI 效果\n  - 完全在静默情况下处理 App 内部逻辑\n  - 使用一些 App Store 审核不会通过的功能，在审核时关闭功能，上架后通过接收消息，开启相关功能\n\n\n# 组合大招篇\n---\n\n#### Tip 8：tags 的组合技巧\n- 见 Tip 5 - 标签 tag 推送\n- 可以通过 App 自己的服务端来统计分析用户行为，然后将指定的 tags 发送至手机，手机接收后再为用户打上对应的 tags\n\n#### Tip 9：推送+消息的组合技巧\n- 首先来看推送和消息各自的特性\n  - 推送\n    - 展示性：提醒作用\n    - 延迟性：不稳定\n    - 全局性：不论 App 处于哪种状态均能接收\n    - 丢失性：因为各种网络原因，可能丢失。在客户端不能获取历史纪录。\n  - 消息\n    - 静默性：处理逻辑\n    - 即时性：稳定\n    - 前台性：只有处于前台才能收到\n    - 存留性：必然送达。在客户端可以获取历史纪录。\n- 由于各自的特性都完全相反，因此 2 者结合使用是使得 App 性能最大化的必然选择：\n  - 情景一：\n    QQ/微信 聊天。会同时下发一组 `推送+消息` ，如果用户没有启动 QQ，虽有延迟但必然能够先收到 `推送`，在受到推送的提醒之后，用户打开 App，此时收到了离线 `消息`，即时更新 UI，与好友即时的发送/接收消息。（在收到推送后，断网，然后启动 App，你会发现此时手机里并不会显示刚刚推送的内容，因为它是依靠拉取消息来刷新页面的，而不是不够稳定的推送）\n\n    ​\n\n\n# 附赠\n---\n极光推送 `所有 API` 调用 demo，download：[JPush demo](https://github.com/pikacode/EBResources/blob/master/JPush%20demo/jpush-demo-wxc.zip)\n![demo.gif](http://upload-images.jianshu.io/upload_images/1944178-6d81cf215f7f28cd.gif?imageMogr2/auto-orient/strip)","source":"_posts/5.iOS 推送全解析，你不得不知的所有 Tips！.md","raw":"---\ntitle: iOS 推送全解析，你不得不知的所有 Tips！\ndate: 2016.08.31 15:45:58\ntags:\n\t- Push Notification\ncategories:\n\t- Push Notification\n---\n `推送服务` 可以说是所有 App 的标配，不论是哪种类型的 App，推送都从很大程度上决定了 App 的 `打开率、使用率、存活率` 。因此，熟知并掌握推送原理及方法，对每一个开发者来说都是必备技能，对每一个依赖 App 的公司来说都至关重要。\n\n从 iOS 10 新增的 `UserNotifications Framework` 可以发现，Apple 整合了原有散乱的 API，并且增加了许多强大的功能。以 Apple 官方的角度来看，也必然是相当重视推送服务对 App 的影响、以及对 Apple 生态圈长远发展的影响。\n\n本文旨在跟大家分享使用 iOS 推送的一些经验，欢迎互相交流，指出错漏之处。因为内容较多，有些地方可能稍显杂乱。（以下 `推送` 均指 `iOS 推送` ）\n\n# 准备篇\n---\n\n#### Tip 1：推送 `必须` 购买 Apple 开发者账号，并使用特定的 `推送证书`\n- 使用免费帐号不能推送\n- 那如果我们使用的是第三方推送服务（以下简称 `第三方` ）呢？比如「极光推送」。也必须购买开发者帐号。因为所有的第三方都会将推送请求发至 APNs（Apple Push Notification service 苹果推送通知服务），所有推送均是由 APNs 下发。\n- 如何注册及正确的配置证书，参考这里 [iOS 证书设置指南](http://docs.jiguang.cn/client/ios_tutorials/#ios_1)\n\n\n# 原理篇\n---\n\n#### Tip 2：推送本身是 iOS 系统的行为，所以在 App 没有运行的时候：\n- 仍然能够推送及接收（通知中心通知、顶部弹窗、刷新 App 右上角的小圆点即 `badge` [以下简称 `角标`] 等都会由系统来控制和展示）\n- 收到推送时，是无法在 App 的代码中获取到推送内容的。因为沙盒机制，此时 App 的任何代码都不可能被执行\n\n#### Tip 3：手机向 APNs 注册推送服务\n1. 在代码中注册推送服务：\n```objc\n#ifdef __IPHONE_8_0\nif ([[UIApplication sharedApplication] respondsToSelector:@selector(registerUserNotificationSettings:)]) {\n        UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeBadge|UIUserNotificationTypeSound|UIUserNotificationTypeAlert categories:nil];\n        [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n} else {\n        UIRemoteNotificationType myTypes = UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound;\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:myTypes];\n}\n#else\n        UIRemoteNotificationType myTypes = UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound;\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:myTypes];\n#endif\n```\n2. 在第1次触发这段代码的时候，会有1个系统弹窗，询问你是否允许该 App 要给你推送信息。当你选择 `允许` 时，系统会打包 `App+手机唯一标识+证书` 信息发送至 APNs 服务器注册推送服务，APNs 系统会对该手机安装的该 App 是否有推送权限进行验证，所以必须要加入了 Apple Deveice 的手机，使用对应 App 的 `推送证书` 才能够成功的注册。\n3. 如果注册成功，则可以在 `AppDelegate.m` 的如下方法中获取到 `\n   deviceToken`，它是对 `该手机+该App` 组合的一个唯一标识，当使用远程推送时，只需将推送消息发给指定的 `deviceToken` 即可使推送信息传达给指定手机的指定 App 上。因此如果你使用第三方，就需要在这个方法里将 `deviceToken` 传给第三方。（在 iOS 9 为了更好的保护用户隐私，会出现多次重复删除/安装 App 导致 `deviceToken` 不断变化的情况）\n```objc\n-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {  \n      [JPUSHService registerDeviceToken:deviceToken];//将 deviceToken 传给极光推送\n}\n```\n4. 综上，注册及接收推送 `必须` 使用真机，`必须` 连网\n\n#### Tip 4：推送从 服务端 --> App 代码 的过程\n1. 使用你们公司或第三方的服务端向 APNs 发送推送请求（包含 `推送内容+App描述+手机描述` ）\n2. APNs 接收并验证推送请求\n3. APNs 利用网络搜索并定位指定设备，下发推送\n4. 手机收到推送，系统根据 App 状态进行处理\n- 前台收到：\n    - 系统会将推送内容传到 `didReceiveRemoteNotification`\n- 后台收到：\n    - 如果开启了 `Remote Notification` ，系统将推送传到 `didReceiveRemoteNotification:fetchCompletionHandler:`（见 Tip 5 - 后台推送）\n    - 展示弹窗、推送中心、声音、角标\n- 退出收到：\n    - 如果点击推送弹窗/通知中心而启动 App，系统将推送传到 `didFinishLaunchingWithOptions`\n    - 展示弹窗、推送中心、声音、角标\n\n\n# 推送内容篇\n---\n\n#### Tip 5：推送分为 本地/远程 2 种类型：\n- 本地推送，可指定推送时间，在该时间准时弹出推送通知\n- 远程推送，分为 `普通推送/后台推送/静默推送` 3 种类型。存在延迟问题（由于 Tip 1 第 2 点，APNs 的不稳定及高峰时段的巨量请求所致）\n  - 普通推送\n    - 就是我们在手机上平时见到的推送\n    - 包含声音、弹窗、角标、自定义字段\n    - App \n      - 处于前台，可通过 `didReceiveRemoteNotification` 获取推送内容\n      - 处于后台，无法获取推送内容\n      - 处于退出，无法获取推送内容\n      - 点击图标启动，无法获取推送内容\n      - 点击推送弹窗启动，在 `didFinishLaunchingWithOptions` 获取推送内容\n    - 推送内容类似如下：\n```json\n{\n        \"_j_msgid\" = 200806057;//第三方附带的 id，用于在后台查询送达情况\n        aps =     {\n          alert = \"显示内容\";\n          badge = 1;//App 角标，可推送 n、+n、-n 来实现角标的固定、增加、减少\n          sound = default;//推送声音，默认系统三全音，如需使用自己的声音，需要将声音文件拖拽&拷贝至 Xcode 工程目录任意位置，并在推送时指定其文件名\n        };\n        key1 = value1;//自定义字段，可设置多组，用于处理内部逻辑\n        key2 = value2;\n} \n```\n- 后台推送\n    - 各种显示效果跟普通推送完全一样\n    - 必须携带 `\"content-available\" = 1;`\n    - 必须携带 `alert`、`badge`、`sound` 中 `至少 1 个字段`\n    - 仅 iOS 7 以后支持\n    - 必须在 Xcode 工程中 `TARGETS - Capabilities - Background Modes - Remote notifications` 开启该功能，具体可参照 [iOS 7 Background Remote Notification](http://docs.jiguang.cn/client/ios_tutorials/#ios-7-background-remote-notification)\n    - App\n      - 处于前台，可通过 `didReceiveRemoteNotification` 获取推送内容\n      - 处于后台，可通过`didReceiveRemoteNotification:fetchCompletionHandler:` 获取推送内容//获取情况中与 `普通推送` 的唯一不同点，`此时 iOS 系统允许开发者在 App 处于后台的情况下，执行一些代码，大概提供几分钟的时间，可以用来偷偷的刷新 UI、切换页面、下载更新包等等操作`\n      - 处于退出，无法获取推送内容\n      - 点击图标启动，无法获取推送内容\n      - 点击推送弹窗启动，在 `didFinishLaunchingWithOptions` 获取推送内容\n- 推送内容类似如下：\n```json\n{\n        \"_j_msgid\" = 2090737306;\n          aps =     {\n          alert = \"显示内容\";\n          badge = 1;\n          \"content-available\" = 1;//必带字段\n          sound = default;\n        };\n        key1 = value1;\n}\n```\n- 静默推送\n    - 必须携带 `\"content-available\" = 1;`，因此静默`必然`是后台的\n    - 必须不携带 `alert`、`badge`、`sound`\n    - 可携带自定义字段\n    - 在用户完全不知情的情况下被 App `didReceiveRemoteNotification` 接收并处理（仅限 App 处于前台时，其他状态因没有任何提示，故无法被用户触发并被代码截获。）\n    - 推送内容类似如下：\n```json\n{\n        \"_j_msgid\" = 3938587719;\n        aps =     {\n          alert = \"\";\n          \"content-available\" = 1;//必带字段\n        };\n        key1 = value1;\n}\n```\n\n\n# 别名/标签篇\n---\n#### Tip 6：推送根据对象的不同可分为：\n- 广播\n  - 无差别发送给所有用户\n- 别名 `alias` 推送\n  - 1 个手机的 1 款 App 只能设置 1 个 alias（可修改）\n  - 用于指定一些基本属性，如男/女性用户\n  - 推送时可指定多个 alias 来下发同一内容\n  - 仅指定 alias 的用户能够收到推送\n- 标签 `tag` 推送\n  - 可设置多个、可增加、清空\n  - 用于指定多样的属性，如 `1000`+`daily`+`discount` 可用于表示 `月消费超过 1k`、`喜欢购买日用品`、`偏好折扣商品` 的用户\n  - 如果要 `删除`，需要在上次设置时，将设置的 tags 保存至 `NSUserDefaults`，本次剔除不需要的 tag 后，再重新设置\n  - 推送时可指定多个 tag 来下发同一内容\n  - 手机如果设置了推送指定的多个 tag 中 `任一个` tag，都能够收到推送消息。如指定 `1000`+`globe`+`original` （千元级消费者、`全球购`、原价），那么设置了 `100`+`globe`+`discount`（百元级消费者、`全球购`、折扣价）的用户可以收到该推送消息。\n- `Registration ID` 推送\n  - 在 Tip 3 的第 3 步时将 `deviceToken` 提供给第三方之后，其服务器会自动生成的指向该手机的唯一 `id`\n  - 可在推送时指定多个 id 来下发消息\n  - 可用于对 `核心用户`、`旗舰用户` 的 `精准推送`\n\n\n# 自定义消息篇\n---\n\n#### Tip 7：自定义消息（以下简称 `消息` ）和推送的区别，消息：\n- 不需要 Apple 推送证书\n- 由第三方的服务器下发，而不是 APNs\n- 相比推送，更快速，几乎没有延迟，可用于 IM 消息的即时送达\n- 通过长连接技术下发消息，因此\n  - 手机必须启动并与第三方服务器建立连接\n  - 如果手机启动立刻切至后台，很可能连接没有建立\n  - 手机必须处于前台才能收到消息\n  - 手机从后台切回前台，会自动重新建立连接，并收到离线消息\n- 没有任何展示（弹窗、通知中心、角标、声音），因此可以：\n  - 自定义字段实现 UI 效果\n  - 完全在静默情况下处理 App 内部逻辑\n  - 使用一些 App Store 审核不会通过的功能，在审核时关闭功能，上架后通过接收消息，开启相关功能\n\n\n# 组合大招篇\n---\n\n#### Tip 8：tags 的组合技巧\n- 见 Tip 5 - 标签 tag 推送\n- 可以通过 App 自己的服务端来统计分析用户行为，然后将指定的 tags 发送至手机，手机接收后再为用户打上对应的 tags\n\n#### Tip 9：推送+消息的组合技巧\n- 首先来看推送和消息各自的特性\n  - 推送\n    - 展示性：提醒作用\n    - 延迟性：不稳定\n    - 全局性：不论 App 处于哪种状态均能接收\n    - 丢失性：因为各种网络原因，可能丢失。在客户端不能获取历史纪录。\n  - 消息\n    - 静默性：处理逻辑\n    - 即时性：稳定\n    - 前台性：只有处于前台才能收到\n    - 存留性：必然送达。在客户端可以获取历史纪录。\n- 由于各自的特性都完全相反，因此 2 者结合使用是使得 App 性能最大化的必然选择：\n  - 情景一：\n    QQ/微信 聊天。会同时下发一组 `推送+消息` ，如果用户没有启动 QQ，虽有延迟但必然能够先收到 `推送`，在受到推送的提醒之后，用户打开 App，此时收到了离线 `消息`，即时更新 UI，与好友即时的发送/接收消息。（在收到推送后，断网，然后启动 App，你会发现此时手机里并不会显示刚刚推送的内容，因为它是依靠拉取消息来刷新页面的，而不是不够稳定的推送）\n\n    ​\n\n\n# 附赠\n---\n极光推送 `所有 API` 调用 demo，download：[JPush demo](https://github.com/pikacode/EBResources/blob/master/JPush%20demo/jpush-demo-wxc.zip)\n![demo.gif](http://upload-images.jianshu.io/upload_images/1944178-6d81cf215f7f28cd.gif?imageMogr2/auto-orient/strip)","slug":"5.iOS 推送全解析，你不得不知的所有 Tips！","published":1,"updated":"2016-09-01T07:52:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisk6ki7v0009sbbd380scppa","content":"<p> <code>推送服务</code> 可以说是所有 App 的标配，不论是哪种类型的 App，推送都从很大程度上决定了 App 的 <code>打开率、使用率、存活率</code> 。因此，熟知并掌握推送原理及方法，对每一个开发者来说都是必备技能，对每一个依赖 App 的公司来说都至关重要。</p>\n<p>从 iOS 10 新增的 <code>UserNotifications Framework</code> 可以发现，Apple 整合了原有散乱的 API，并且增加了许多强大的功能。以 Apple 官方的角度来看，也必然是相当重视推送服务对 App 的影响、以及对 Apple 生态圈长远发展的影响。</p>\n<p>本文旨在跟大家分享使用 iOS 推送的一些经验，欢迎互相交流，指出错漏之处。因为内容较多，有些地方可能稍显杂乱。（以下 <code>推送</code> 均指 <code>iOS 推送</code> ）</p>\n<h1 id=\"准备篇\"><a href=\"#准备篇\" class=\"headerlink\" title=\"准备篇\"></a>准备篇</h1><hr>\n<h4 id=\"Tip-1：推送-必须-购买-Apple-开发者账号，并使用特定的-推送证书\"><a href=\"#Tip-1：推送-必须-购买-Apple-开发者账号，并使用特定的-推送证书\" class=\"headerlink\" title=\"Tip 1：推送 必须 购买 Apple 开发者账号，并使用特定的 推送证书\"></a>Tip 1：推送 <code>必须</code> 购买 Apple 开发者账号，并使用特定的 <code>推送证书</code></h4><ul>\n<li>使用免费帐号不能推送</li>\n<li>那如果我们使用的是第三方推送服务（以下简称 <code>第三方</code> ）呢？比如「极光推送」。也必须购买开发者帐号。因为所有的第三方都会将推送请求发至 APNs（Apple Push Notification service 苹果推送通知服务），所有推送均是由 APNs 下发。</li>\n<li>如何注册及正确的配置证书，参考这里 <a href=\"http://docs.jiguang.cn/client/ios_tutorials/#ios_1\" target=\"_blank\" rel=\"external\">iOS 证书设置指南</a></li>\n</ul>\n<h1 id=\"原理篇\"><a href=\"#原理篇\" class=\"headerlink\" title=\"原理篇\"></a>原理篇</h1><hr>\n<h4 id=\"Tip-2：推送本身是-iOS-系统的行为，所以在-App-没有运行的时候：\"><a href=\"#Tip-2：推送本身是-iOS-系统的行为，所以在-App-没有运行的时候：\" class=\"headerlink\" title=\"Tip 2：推送本身是 iOS 系统的行为，所以在 App 没有运行的时候：\"></a>Tip 2：推送本身是 iOS 系统的行为，所以在 App 没有运行的时候：</h4><ul>\n<li>仍然能够推送及接收（通知中心通知、顶部弹窗、刷新 App 右上角的小圆点即 <code>badge</code> [以下简称 <code>角标</code>] 等都会由系统来控制和展示）</li>\n<li>收到推送时，是无法在 App 的代码中获取到推送内容的。因为沙盒机制，此时 App 的任何代码都不可能被执行</li>\n</ul>\n<h4 id=\"Tip-3：手机向-APNs-注册推送服务\"><a href=\"#Tip-3：手机向-APNs-注册推送服务\" class=\"headerlink\" title=\"Tip 3：手机向 APNs 注册推送服务\"></a>Tip 3：手机向 APNs 注册推送服务</h4><ol>\n<li><p>在代码中注册推送服务：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#ifdef __IPHONE_8_0</span></div><div class=\"line\"><span class=\"keyword\">if</span> ([[<span class=\"built_in\">UIApplication</span> sharedApplication] respondsToSelector:<span class=\"keyword\">@selector</span>(registerUserNotificationSettings:)]) &#123;</div><div class=\"line\">        <span class=\"built_in\">UIUserNotificationSettings</span> *settings = [<span class=\"built_in\">UIUserNotificationSettings</span> settingsForTypes:<span class=\"built_in\">UIUserNotificationTypeBadge</span>|<span class=\"built_in\">UIUserNotificationTypeSound</span>|<span class=\"built_in\">UIUserNotificationTypeAlert</span> categories:<span class=\"literal\">nil</span>];</div><div class=\"line\">        [[<span class=\"built_in\">UIApplication</span> sharedApplication] registerUserNotificationSettings:settings];</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">UIRemoteNotificationType</span> myTypes = <span class=\"built_in\">UIRemoteNotificationTypeBadge</span> | <span class=\"built_in\">UIRemoteNotificationTypeAlert</span> | <span class=\"built_in\">UIRemoteNotificationTypeSound</span>;</div><div class=\"line\">        [[<span class=\"built_in\">UIApplication</span> sharedApplication] registerForRemoteNotificationTypes:myTypes];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#else</span></div><div class=\"line\">        <span class=\"built_in\">UIRemoteNotificationType</span> myTypes = <span class=\"built_in\">UIRemoteNotificationTypeBadge</span> | <span class=\"built_in\">UIRemoteNotificationTypeAlert</span> | <span class=\"built_in\">UIRemoteNotificationTypeSound</span>;</div><div class=\"line\">        [[<span class=\"built_in\">UIApplication</span> sharedApplication] registerForRemoteNotificationTypes:myTypes];</div><div class=\"line\"><span class=\"meta\">#endif</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在第1次触发这段代码的时候，会有1个系统弹窗，询问你是否允许该 App 要给你推送信息。当你选择 <code>允许</code> 时，系统会打包 <code>App+手机唯一标识+证书</code> 信息发送至 APNs 服务器注册推送服务，APNs 系统会对该手机安装的该 App 是否有推送权限进行验证，所以必须要加入了 Apple Deveice 的手机，使用对应 App 的 <code>推送证书</code> 才能够成功的注册。</p>\n</li>\n<li><p>如果注册成功，则可以在 <code>AppDelegate.m</code> 的如下方法中获取到 <code>deviceToken</code>，它是对 <code>该手机+该App</code> 组合的一个唯一标识，当使用远程推送时，只需将推送消息发给指定的 <code>deviceToken</code> 即可使推送信息传达给指定手机的指定 App 上。因此如果你使用第三方，就需要在这个方法里将 <code>deviceToken</code> 传给第三方。（在 iOS 9 为了更好的保护用户隐私，会出现多次重复删除/安装 App 导致 <code>deviceToken</code> 不断变化的情况）</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class=\"built_in\">NSData</span> *)deviceToken &#123;  </div><div class=\"line\">      [JPUSHService registerDeviceToken:deviceToken];<span class=\"comment\">//将 deviceToken 传给极光推送</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>综上，注册及接收推送 <code>必须</code> 使用真机，<code>必须</code> 连网</p>\n</li>\n</ol>\n<h4 id=\"Tip-4：推送从-服务端-–-gt-App-代码-的过程\"><a href=\"#Tip-4：推送从-服务端-–-gt-App-代码-的过程\" class=\"headerlink\" title=\"Tip 4：推送从 服务端 –&gt; App 代码 的过程\"></a>Tip 4：推送从 服务端 –&gt; App 代码 的过程</h4><ol>\n<li>使用你们公司或第三方的服务端向 APNs 发送推送请求（包含 <code>推送内容+App描述+手机描述</code> ）</li>\n<li>APNs 接收并验证推送请求</li>\n<li>APNs 利用网络搜索并定位指定设备，下发推送</li>\n<li>手机收到推送，系统根据 App 状态进行处理</li>\n</ol>\n<ul>\n<li>前台收到：<ul>\n<li>系统会将推送内容传到 <code>didReceiveRemoteNotification</code></li>\n</ul>\n</li>\n<li>后台收到：<ul>\n<li>如果开启了 <code>Remote Notification</code> ，系统将推送传到 <code>didReceiveRemoteNotification:fetchCompletionHandler:</code>（见 Tip 5 - 后台推送）</li>\n<li>展示弹窗、推送中心、声音、角标</li>\n</ul>\n</li>\n<li>退出收到：<ul>\n<li>如果点击推送弹窗/通知中心而启动 App，系统将推送传到 <code>didFinishLaunchingWithOptions</code></li>\n<li>展示弹窗、推送中心、声音、角标</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"推送内容篇\"><a href=\"#推送内容篇\" class=\"headerlink\" title=\"推送内容篇\"></a>推送内容篇</h1><hr>\n<h4 id=\"Tip-5：推送分为-本地-远程-2-种类型：\"><a href=\"#Tip-5：推送分为-本地-远程-2-种类型：\" class=\"headerlink\" title=\"Tip 5：推送分为 本地/远程 2 种类型：\"></a>Tip 5：推送分为 本地/远程 2 种类型：</h4><ul>\n<li>本地推送，可指定推送时间，在该时间准时弹出推送通知</li>\n<li><p>远程推送，分为 <code>普通推送/后台推送/静默推送</code> 3 种类型。存在延迟问题（由于 Tip 1 第 2 点，APNs 的不稳定及高峰时段的巨量请求所致）</p>\n<ul>\n<li>普通推送<ul>\n<li>就是我们在手机上平时见到的推送</li>\n<li>包含声音、弹窗、角标、自定义字段</li>\n<li>App <ul>\n<li>处于前台，可通过 <code>didReceiveRemoteNotification</code> 获取推送内容</li>\n<li>处于后台，无法获取推送内容</li>\n<li>处于退出，无法获取推送内容</li>\n<li>点击图标启动，无法获取推送内容</li>\n<li>点击推送弹窗启动，在 <code>didFinishLaunchingWithOptions</code> 获取推送内容</li>\n</ul>\n</li>\n<li>推送内容类似如下：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        \"_j_msgid\" = 200806057;//第三方附带的 id，用于在后台查询送达情况</div><div class=\"line\">        aps =     &#123;</div><div class=\"line\">          alert = \"显示内容\";</div><div class=\"line\">          badge = 1;//App 角标，可推送 n、+n、-n 来实现角标的固定、增加、减少</div><div class=\"line\">          sound = default;//推送声音，默认系统三全音，如需使用自己的声音，需要将声音文件拖拽&amp;拷贝至 Xcode 工程目录任意位置，并在推送时指定其文件名</div><div class=\"line\">        &#125;;</div><div class=\"line\">        key1 = value1;//自定义字段，可设置多组，用于处理内部逻辑</div><div class=\"line\">        key2 = value2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>后台推送</p>\n<ul>\n<li>各种显示效果跟普通推送完全一样</li>\n<li>必须携带 <code>&quot;content-available&quot; = 1;</code></li>\n<li>必须携带 <code>alert</code>、<code>badge</code>、<code>sound</code> 中 <code>至少 1 个字段</code></li>\n<li>仅 iOS 7 以后支持</li>\n<li>必须在 Xcode 工程中 <code>TARGETS - Capabilities - Background Modes - Remote notifications</code> 开启该功能，具体可参照 <a href=\"http://docs.jiguang.cn/client/ios_tutorials/#ios-7-background-remote-notification\" target=\"_blank\" rel=\"external\">iOS 7 Background Remote Notification</a></li>\n<li>App<ul>\n<li>处于前台，可通过 <code>didReceiveRemoteNotification</code> 获取推送内容</li>\n<li>处于后台，可通过<code>didReceiveRemoteNotification:fetchCompletionHandler:</code> 获取推送内容//获取情况中与 <code>普通推送</code> 的唯一不同点，<code>此时 iOS 系统允许开发者在 App 处于后台的情况下，执行一些代码，大概提供几分钟的时间，可以用来偷偷的刷新 UI、切换页面、下载更新包等等操作</code></li>\n<li>处于退出，无法获取推送内容</li>\n<li>点击图标启动，无法获取推送内容</li>\n<li>点击推送弹窗启动，在 <code>didFinishLaunchingWithOptions</code> 获取推送内容</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>推送内容类似如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        \"_j_msgid\" = 2090737306;</div><div class=\"line\">          aps =     &#123;</div><div class=\"line\">          alert = \"显示内容\";</div><div class=\"line\">          badge = 1;</div><div class=\"line\">          \"content-available\" = 1;//必带字段</div><div class=\"line\">          sound = default;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        key1 = value1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>静默推送</p>\n<ul>\n<li>必须携带 <code>&quot;content-available&quot; = 1;</code>，因此静默<code>必然</code>是后台的</li>\n<li>必须不携带 <code>alert</code>、<code>badge</code>、<code>sound</code></li>\n<li>可携带自定义字段</li>\n<li>在用户完全不知情的情况下被 App <code>didReceiveRemoteNotification</code> 接收并处理（仅限 App 处于前台时，其他状态因没有任何提示，故无法被用户触发并被代码截获。）</li>\n<li>推送内容类似如下：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        \"_j_msgid\" = 3938587719;</div><div class=\"line\">        aps =     &#123;</div><div class=\"line\">          alert = \"\";</div><div class=\"line\">          \"content-available\" = 1;//必带字段</div><div class=\"line\">        &#125;;</div><div class=\"line\">        key1 = value1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"别名-标签篇\"><a href=\"#别名-标签篇\" class=\"headerlink\" title=\"别名/标签篇\"></a>别名/标签篇</h1><hr>\n<h4 id=\"Tip-6：推送根据对象的不同可分为：\"><a href=\"#Tip-6：推送根据对象的不同可分为：\" class=\"headerlink\" title=\"Tip 6：推送根据对象的不同可分为：\"></a>Tip 6：推送根据对象的不同可分为：</h4><ul>\n<li>广播<ul>\n<li>无差别发送给所有用户</li>\n</ul>\n</li>\n<li>别名 <code>alias</code> 推送<ul>\n<li>1 个手机的 1 款 App 只能设置 1 个 alias（可修改）</li>\n<li>用于指定一些基本属性，如男/女性用户</li>\n<li>推送时可指定多个 alias 来下发同一内容</li>\n<li>仅指定 alias 的用户能够收到推送</li>\n</ul>\n</li>\n<li>标签 <code>tag</code> 推送<ul>\n<li>可设置多个、可增加、清空</li>\n<li>用于指定多样的属性，如 <code>1000</code>+<code>daily</code>+<code>discount</code> 可用于表示 <code>月消费超过 1k</code>、<code>喜欢购买日用品</code>、<code>偏好折扣商品</code> 的用户</li>\n<li>如果要 <code>删除</code>，需要在上次设置时，将设置的 tags 保存至 <code>NSUserDefaults</code>，本次剔除不需要的 tag 后，再重新设置</li>\n<li>推送时可指定多个 tag 来下发同一内容</li>\n<li>手机如果设置了推送指定的多个 tag 中 <code>任一个</code> tag，都能够收到推送消息。如指定 <code>1000</code>+<code>globe</code>+<code>original</code> （千元级消费者、<code>全球购</code>、原价），那么设置了 <code>100</code>+<code>globe</code>+<code>discount</code>（百元级消费者、<code>全球购</code>、折扣价）的用户可以收到该推送消息。</li>\n</ul>\n</li>\n<li><code>Registration ID</code> 推送<ul>\n<li>在 Tip 3 的第 3 步时将 <code>deviceToken</code> 提供给第三方之后，其服务器会自动生成的指向该手机的唯一 <code>id</code></li>\n<li>可在推送时指定多个 id 来下发消息</li>\n<li>可用于对 <code>核心用户</code>、<code>旗舰用户</code> 的 <code>精准推送</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"自定义消息篇\"><a href=\"#自定义消息篇\" class=\"headerlink\" title=\"自定义消息篇\"></a>自定义消息篇</h1><hr>\n<h4 id=\"Tip-7：自定义消息（以下简称-消息-）和推送的区别，消息：\"><a href=\"#Tip-7：自定义消息（以下简称-消息-）和推送的区别，消息：\" class=\"headerlink\" title=\"Tip 7：自定义消息（以下简称 消息 ）和推送的区别，消息：\"></a>Tip 7：自定义消息（以下简称 <code>消息</code> ）和推送的区别，消息：</h4><ul>\n<li>不需要 Apple 推送证书</li>\n<li>由第三方的服务器下发，而不是 APNs</li>\n<li>相比推送，更快速，几乎没有延迟，可用于 IM 消息的即时送达</li>\n<li>通过长连接技术下发消息，因此<ul>\n<li>手机必须启动并与第三方服务器建立连接</li>\n<li>如果手机启动立刻切至后台，很可能连接没有建立</li>\n<li>手机必须处于前台才能收到消息</li>\n<li>手机从后台切回前台，会自动重新建立连接，并收到离线消息</li>\n</ul>\n</li>\n<li>没有任何展示（弹窗、通知中心、角标、声音），因此可以：<ul>\n<li>自定义字段实现 UI 效果</li>\n<li>完全在静默情况下处理 App 内部逻辑</li>\n<li>使用一些 App Store 审核不会通过的功能，在审核时关闭功能，上架后通过接收消息，开启相关功能</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"组合大招篇\"><a href=\"#组合大招篇\" class=\"headerlink\" title=\"组合大招篇\"></a>组合大招篇</h1><hr>\n<h4 id=\"Tip-8：tags-的组合技巧\"><a href=\"#Tip-8：tags-的组合技巧\" class=\"headerlink\" title=\"Tip 8：tags 的组合技巧\"></a>Tip 8：tags 的组合技巧</h4><ul>\n<li>见 Tip 5 - 标签 tag 推送</li>\n<li>可以通过 App 自己的服务端来统计分析用户行为，然后将指定的 tags 发送至手机，手机接收后再为用户打上对应的 tags</li>\n</ul>\n<h4 id=\"Tip-9：推送-消息的组合技巧\"><a href=\"#Tip-9：推送-消息的组合技巧\" class=\"headerlink\" title=\"Tip 9：推送+消息的组合技巧\"></a>Tip 9：推送+消息的组合技巧</h4><ul>\n<li>首先来看推送和消息各自的特性<ul>\n<li>推送<ul>\n<li>展示性：提醒作用</li>\n<li>延迟性：不稳定</li>\n<li>全局性：不论 App 处于哪种状态均能接收</li>\n<li>丢失性：因为各种网络原因，可能丢失。在客户端不能获取历史纪录。</li>\n</ul>\n</li>\n<li>消息<ul>\n<li>静默性：处理逻辑</li>\n<li>即时性：稳定</li>\n<li>前台性：只有处于前台才能收到</li>\n<li>存留性：必然送达。在客户端可以获取历史纪录。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>由于各自的特性都完全相反，因此 2 者结合使用是使得 App 性能最大化的必然选择：</p>\n<ul>\n<li><p>情景一：<br>QQ/微信 聊天。会同时下发一组 <code>推送+消息</code> ，如果用户没有启动 QQ，虽有延迟但必然能够先收到 <code>推送</code>，在受到推送的提醒之后，用户打开 App，此时收到了离线 <code>消息</code>，即时更新 UI，与好友即时的发送/接收消息。（在收到推送后，断网，然后启动 App，你会发现此时手机里并不会显示刚刚推送的内容，因为它是依靠拉取消息来刷新页面的，而不是不够稳定的推送）</p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"附赠\"><a href=\"#附赠\" class=\"headerlink\" title=\"附赠\"></a>附赠</h1><hr>\n<p>极光推送 <code>所有 API</code> 调用 demo，download：<a href=\"https://github.com/pikacode/EBResources/blob/master/JPush%20demo/jpush-demo-wxc.zip\" target=\"_blank\" rel=\"external\">JPush demo</a><br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-6d81cf215f7f28cd.gif?imageMogr2/auto-orient/strip\" alt=\"demo.gif\"></p>\n","excerpt":"","more":"<p> <code>推送服务</code> 可以说是所有 App 的标配，不论是哪种类型的 App，推送都从很大程度上决定了 App 的 <code>打开率、使用率、存活率</code> 。因此，熟知并掌握推送原理及方法，对每一个开发者来说都是必备技能，对每一个依赖 App 的公司来说都至关重要。</p>\n<p>从 iOS 10 新增的 <code>UserNotifications Framework</code> 可以发现，Apple 整合了原有散乱的 API，并且增加了许多强大的功能。以 Apple 官方的角度来看，也必然是相当重视推送服务对 App 的影响、以及对 Apple 生态圈长远发展的影响。</p>\n<p>本文旨在跟大家分享使用 iOS 推送的一些经验，欢迎互相交流，指出错漏之处。因为内容较多，有些地方可能稍显杂乱。（以下 <code>推送</code> 均指 <code>iOS 推送</code> ）</p>\n<h1 id=\"准备篇\"><a href=\"#准备篇\" class=\"headerlink\" title=\"准备篇\"></a>准备篇</h1><hr>\n<h4 id=\"Tip-1：推送-必须-购买-Apple-开发者账号，并使用特定的-推送证书\"><a href=\"#Tip-1：推送-必须-购买-Apple-开发者账号，并使用特定的-推送证书\" class=\"headerlink\" title=\"Tip 1：推送 必须 购买 Apple 开发者账号，并使用特定的 推送证书\"></a>Tip 1：推送 <code>必须</code> 购买 Apple 开发者账号，并使用特定的 <code>推送证书</code></h4><ul>\n<li>使用免费帐号不能推送</li>\n<li>那如果我们使用的是第三方推送服务（以下简称 <code>第三方</code> ）呢？比如「极光推送」。也必须购买开发者帐号。因为所有的第三方都会将推送请求发至 APNs（Apple Push Notification service 苹果推送通知服务），所有推送均是由 APNs 下发。</li>\n<li>如何注册及正确的配置证书，参考这里 <a href=\"http://docs.jiguang.cn/client/ios_tutorials/#ios_1\">iOS 证书设置指南</a></li>\n</ul>\n<h1 id=\"原理篇\"><a href=\"#原理篇\" class=\"headerlink\" title=\"原理篇\"></a>原理篇</h1><hr>\n<h4 id=\"Tip-2：推送本身是-iOS-系统的行为，所以在-App-没有运行的时候：\"><a href=\"#Tip-2：推送本身是-iOS-系统的行为，所以在-App-没有运行的时候：\" class=\"headerlink\" title=\"Tip 2：推送本身是 iOS 系统的行为，所以在 App 没有运行的时候：\"></a>Tip 2：推送本身是 iOS 系统的行为，所以在 App 没有运行的时候：</h4><ul>\n<li>仍然能够推送及接收（通知中心通知、顶部弹窗、刷新 App 右上角的小圆点即 <code>badge</code> [以下简称 <code>角标</code>] 等都会由系统来控制和展示）</li>\n<li>收到推送时，是无法在 App 的代码中获取到推送内容的。因为沙盒机制，此时 App 的任何代码都不可能被执行</li>\n</ul>\n<h4 id=\"Tip-3：手机向-APNs-注册推送服务\"><a href=\"#Tip-3：手机向-APNs-注册推送服务\" class=\"headerlink\" title=\"Tip 3：手机向 APNs 注册推送服务\"></a>Tip 3：手机向 APNs 注册推送服务</h4><ol>\n<li><p>在代码中注册推送服务：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#ifdef __IPHONE_8_0</span></div><div class=\"line\"><span class=\"keyword\">if</span> ([[<span class=\"built_in\">UIApplication</span> sharedApplication] respondsToSelector:<span class=\"keyword\">@selector</span>(registerUserNotificationSettings:)]) &#123;</div><div class=\"line\">        <span class=\"built_in\">UIUserNotificationSettings</span> *settings = [<span class=\"built_in\">UIUserNotificationSettings</span> settingsForTypes:<span class=\"built_in\">UIUserNotificationTypeBadge</span>|<span class=\"built_in\">UIUserNotificationTypeSound</span>|<span class=\"built_in\">UIUserNotificationTypeAlert</span> categories:<span class=\"literal\">nil</span>];</div><div class=\"line\">        [[<span class=\"built_in\">UIApplication</span> sharedApplication] registerUserNotificationSettings:settings];</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">UIRemoteNotificationType</span> myTypes = <span class=\"built_in\">UIRemoteNotificationTypeBadge</span> | <span class=\"built_in\">UIRemoteNotificationTypeAlert</span> | <span class=\"built_in\">UIRemoteNotificationTypeSound</span>;</div><div class=\"line\">        [[<span class=\"built_in\">UIApplication</span> sharedApplication] registerForRemoteNotificationTypes:myTypes];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#else</span></div><div class=\"line\">        <span class=\"built_in\">UIRemoteNotificationType</span> myTypes = <span class=\"built_in\">UIRemoteNotificationTypeBadge</span> | <span class=\"built_in\">UIRemoteNotificationTypeAlert</span> | <span class=\"built_in\">UIRemoteNotificationTypeSound</span>;</div><div class=\"line\">        [[<span class=\"built_in\">UIApplication</span> sharedApplication] registerForRemoteNotificationTypes:myTypes];</div><div class=\"line\"><span class=\"meta\">#endif</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在第1次触发这段代码的时候，会有1个系统弹窗，询问你是否允许该 App 要给你推送信息。当你选择 <code>允许</code> 时，系统会打包 <code>App+手机唯一标识+证书</code> 信息发送至 APNs 服务器注册推送服务，APNs 系统会对该手机安装的该 App 是否有推送权限进行验证，所以必须要加入了 Apple Deveice 的手机，使用对应 App 的 <code>推送证书</code> 才能够成功的注册。</p>\n</li>\n<li><p>如果注册成功，则可以在 <code>AppDelegate.m</code> 的如下方法中获取到 <code>deviceToken</code>，它是对 <code>该手机+该App</code> 组合的一个唯一标识，当使用远程推送时，只需将推送消息发给指定的 <code>deviceToken</code> 即可使推送信息传达给指定手机的指定 App 上。因此如果你使用第三方，就需要在这个方法里将 <code>deviceToken</code> 传给第三方。（在 iOS 9 为了更好的保护用户隐私，会出现多次重复删除/安装 App 导致 <code>deviceToken</code> 不断变化的情况）</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class=\"built_in\">NSData</span> *)deviceToken &#123;  </div><div class=\"line\">      [JPUSHService registerDeviceToken:deviceToken];<span class=\"comment\">//将 deviceToken 传给极光推送</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>综上，注册及接收推送 <code>必须</code> 使用真机，<code>必须</code> 连网</p>\n</li>\n</ol>\n<h4 id=\"Tip-4：推送从-服务端-–-gt-App-代码-的过程\"><a href=\"#Tip-4：推送从-服务端-–-gt-App-代码-的过程\" class=\"headerlink\" title=\"Tip 4：推送从 服务端 –&gt; App 代码 的过程\"></a>Tip 4：推送从 服务端 –&gt; App 代码 的过程</h4><ol>\n<li>使用你们公司或第三方的服务端向 APNs 发送推送请求（包含 <code>推送内容+App描述+手机描述</code> ）</li>\n<li>APNs 接收并验证推送请求</li>\n<li>APNs 利用网络搜索并定位指定设备，下发推送</li>\n<li>手机收到推送，系统根据 App 状态进行处理</li>\n</ol>\n<ul>\n<li>前台收到：<ul>\n<li>系统会将推送内容传到 <code>didReceiveRemoteNotification</code></li>\n</ul>\n</li>\n<li>后台收到：<ul>\n<li>如果开启了 <code>Remote Notification</code> ，系统将推送传到 <code>didReceiveRemoteNotification:fetchCompletionHandler:</code>（见 Tip 5 - 后台推送）</li>\n<li>展示弹窗、推送中心、声音、角标</li>\n</ul>\n</li>\n<li>退出收到：<ul>\n<li>如果点击推送弹窗/通知中心而启动 App，系统将推送传到 <code>didFinishLaunchingWithOptions</code></li>\n<li>展示弹窗、推送中心、声音、角标</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"推送内容篇\"><a href=\"#推送内容篇\" class=\"headerlink\" title=\"推送内容篇\"></a>推送内容篇</h1><hr>\n<h4 id=\"Tip-5：推送分为-本地-远程-2-种类型：\"><a href=\"#Tip-5：推送分为-本地-远程-2-种类型：\" class=\"headerlink\" title=\"Tip 5：推送分为 本地/远程 2 种类型：\"></a>Tip 5：推送分为 本地/远程 2 种类型：</h4><ul>\n<li>本地推送，可指定推送时间，在该时间准时弹出推送通知</li>\n<li><p>远程推送，分为 <code>普通推送/后台推送/静默推送</code> 3 种类型。存在延迟问题（由于 Tip 1 第 2 点，APNs 的不稳定及高峰时段的巨量请求所致）</p>\n<ul>\n<li>普通推送<ul>\n<li>就是我们在手机上平时见到的推送</li>\n<li>包含声音、弹窗、角标、自定义字段</li>\n<li>App <ul>\n<li>处于前台，可通过 <code>didReceiveRemoteNotification</code> 获取推送内容</li>\n<li>处于后台，无法获取推送内容</li>\n<li>处于退出，无法获取推送内容</li>\n<li>点击图标启动，无法获取推送内容</li>\n<li>点击推送弹窗启动，在 <code>didFinishLaunchingWithOptions</code> 获取推送内容</li>\n</ul>\n</li>\n<li>推送内容类似如下：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        \"_j_msgid\" = 200806057;//第三方附带的 id，用于在后台查询送达情况</div><div class=\"line\">        aps =     &#123;</div><div class=\"line\">          alert = \"显示内容\";</div><div class=\"line\">          badge = 1;//App 角标，可推送 n、+n、-n 来实现角标的固定、增加、减少</div><div class=\"line\">          sound = default;//推送声音，默认系统三全音，如需使用自己的声音，需要将声音文件拖拽&amp;拷贝至 Xcode 工程目录任意位置，并在推送时指定其文件名</div><div class=\"line\">        &#125;;</div><div class=\"line\">        key1 = value1;//自定义字段，可设置多组，用于处理内部逻辑</div><div class=\"line\">        key2 = value2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>后台推送</p>\n<ul>\n<li>各种显示效果跟普通推送完全一样</li>\n<li>必须携带 <code>&quot;content-available&quot; = 1;</code></li>\n<li>必须携带 <code>alert</code>、<code>badge</code>、<code>sound</code> 中 <code>至少 1 个字段</code></li>\n<li>仅 iOS 7 以后支持</li>\n<li>必须在 Xcode 工程中 <code>TARGETS - Capabilities - Background Modes - Remote notifications</code> 开启该功能，具体可参照 <a href=\"http://docs.jiguang.cn/client/ios_tutorials/#ios-7-background-remote-notification\">iOS 7 Background Remote Notification</a></li>\n<li>App<ul>\n<li>处于前台，可通过 <code>didReceiveRemoteNotification</code> 获取推送内容</li>\n<li>处于后台，可通过<code>didReceiveRemoteNotification:fetchCompletionHandler:</code> 获取推送内容//获取情况中与 <code>普通推送</code> 的唯一不同点，<code>此时 iOS 系统允许开发者在 App 处于后台的情况下，执行一些代码，大概提供几分钟的时间，可以用来偷偷的刷新 UI、切换页面、下载更新包等等操作</code></li>\n<li>处于退出，无法获取推送内容</li>\n<li>点击图标启动，无法获取推送内容</li>\n<li>点击推送弹窗启动，在 <code>didFinishLaunchingWithOptions</code> 获取推送内容</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>推送内容类似如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        \"_j_msgid\" = 2090737306;</div><div class=\"line\">          aps =     &#123;</div><div class=\"line\">          alert = \"显示内容\";</div><div class=\"line\">          badge = 1;</div><div class=\"line\">          \"content-available\" = 1;//必带字段</div><div class=\"line\">          sound = default;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        key1 = value1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>静默推送</p>\n<ul>\n<li>必须携带 <code>&quot;content-available&quot; = 1;</code>，因此静默<code>必然</code>是后台的</li>\n<li>必须不携带 <code>alert</code>、<code>badge</code>、<code>sound</code></li>\n<li>可携带自定义字段</li>\n<li>在用户完全不知情的情况下被 App <code>didReceiveRemoteNotification</code> 接收并处理（仅限 App 处于前台时，其他状态因没有任何提示，故无法被用户触发并被代码截获。）</li>\n<li>推送内容类似如下：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        \"_j_msgid\" = 3938587719;</div><div class=\"line\">        aps =     &#123;</div><div class=\"line\">          alert = \"\";</div><div class=\"line\">          \"content-available\" = 1;//必带字段</div><div class=\"line\">        &#125;;</div><div class=\"line\">        key1 = value1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"别名-标签篇\"><a href=\"#别名-标签篇\" class=\"headerlink\" title=\"别名/标签篇\"></a>别名/标签篇</h1><hr>\n<h4 id=\"Tip-6：推送根据对象的不同可分为：\"><a href=\"#Tip-6：推送根据对象的不同可分为：\" class=\"headerlink\" title=\"Tip 6：推送根据对象的不同可分为：\"></a>Tip 6：推送根据对象的不同可分为：</h4><ul>\n<li>广播<ul>\n<li>无差别发送给所有用户</li>\n</ul>\n</li>\n<li>别名 <code>alias</code> 推送<ul>\n<li>1 个手机的 1 款 App 只能设置 1 个 alias（可修改）</li>\n<li>用于指定一些基本属性，如男/女性用户</li>\n<li>推送时可指定多个 alias 来下发同一内容</li>\n<li>仅指定 alias 的用户能够收到推送</li>\n</ul>\n</li>\n<li>标签 <code>tag</code> 推送<ul>\n<li>可设置多个、可增加、清空</li>\n<li>用于指定多样的属性，如 <code>1000</code>+<code>daily</code>+<code>discount</code> 可用于表示 <code>月消费超过 1k</code>、<code>喜欢购买日用品</code>、<code>偏好折扣商品</code> 的用户</li>\n<li>如果要 <code>删除</code>，需要在上次设置时，将设置的 tags 保存至 <code>NSUserDefaults</code>，本次剔除不需要的 tag 后，再重新设置</li>\n<li>推送时可指定多个 tag 来下发同一内容</li>\n<li>手机如果设置了推送指定的多个 tag 中 <code>任一个</code> tag，都能够收到推送消息。如指定 <code>1000</code>+<code>globe</code>+<code>original</code> （千元级消费者、<code>全球购</code>、原价），那么设置了 <code>100</code>+<code>globe</code>+<code>discount</code>（百元级消费者、<code>全球购</code>、折扣价）的用户可以收到该推送消息。</li>\n</ul>\n</li>\n<li><code>Registration ID</code> 推送<ul>\n<li>在 Tip 3 的第 3 步时将 <code>deviceToken</code> 提供给第三方之后，其服务器会自动生成的指向该手机的唯一 <code>id</code></li>\n<li>可在推送时指定多个 id 来下发消息</li>\n<li>可用于对 <code>核心用户</code>、<code>旗舰用户</code> 的 <code>精准推送</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"自定义消息篇\"><a href=\"#自定义消息篇\" class=\"headerlink\" title=\"自定义消息篇\"></a>自定义消息篇</h1><hr>\n<h4 id=\"Tip-7：自定义消息（以下简称-消息-）和推送的区别，消息：\"><a href=\"#Tip-7：自定义消息（以下简称-消息-）和推送的区别，消息：\" class=\"headerlink\" title=\"Tip 7：自定义消息（以下简称 消息 ）和推送的区别，消息：\"></a>Tip 7：自定义消息（以下简称 <code>消息</code> ）和推送的区别，消息：</h4><ul>\n<li>不需要 Apple 推送证书</li>\n<li>由第三方的服务器下发，而不是 APNs</li>\n<li>相比推送，更快速，几乎没有延迟，可用于 IM 消息的即时送达</li>\n<li>通过长连接技术下发消息，因此<ul>\n<li>手机必须启动并与第三方服务器建立连接</li>\n<li>如果手机启动立刻切至后台，很可能连接没有建立</li>\n<li>手机必须处于前台才能收到消息</li>\n<li>手机从后台切回前台，会自动重新建立连接，并收到离线消息</li>\n</ul>\n</li>\n<li>没有任何展示（弹窗、通知中心、角标、声音），因此可以：<ul>\n<li>自定义字段实现 UI 效果</li>\n<li>完全在静默情况下处理 App 内部逻辑</li>\n<li>使用一些 App Store 审核不会通过的功能，在审核时关闭功能，上架后通过接收消息，开启相关功能</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"组合大招篇\"><a href=\"#组合大招篇\" class=\"headerlink\" title=\"组合大招篇\"></a>组合大招篇</h1><hr>\n<h4 id=\"Tip-8：tags-的组合技巧\"><a href=\"#Tip-8：tags-的组合技巧\" class=\"headerlink\" title=\"Tip 8：tags 的组合技巧\"></a>Tip 8：tags 的组合技巧</h4><ul>\n<li>见 Tip 5 - 标签 tag 推送</li>\n<li>可以通过 App 自己的服务端来统计分析用户行为，然后将指定的 tags 发送至手机，手机接收后再为用户打上对应的 tags</li>\n</ul>\n<h4 id=\"Tip-9：推送-消息的组合技巧\"><a href=\"#Tip-9：推送-消息的组合技巧\" class=\"headerlink\" title=\"Tip 9：推送+消息的组合技巧\"></a>Tip 9：推送+消息的组合技巧</h4><ul>\n<li>首先来看推送和消息各自的特性<ul>\n<li>推送<ul>\n<li>展示性：提醒作用</li>\n<li>延迟性：不稳定</li>\n<li>全局性：不论 App 处于哪种状态均能接收</li>\n<li>丢失性：因为各种网络原因，可能丢失。在客户端不能获取历史纪录。</li>\n</ul>\n</li>\n<li>消息<ul>\n<li>静默性：处理逻辑</li>\n<li>即时性：稳定</li>\n<li>前台性：只有处于前台才能收到</li>\n<li>存留性：必然送达。在客户端可以获取历史纪录。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>由于各自的特性都完全相反，因此 2 者结合使用是使得 App 性能最大化的必然选择：</p>\n<ul>\n<li><p>情景一：<br>QQ/微信 聊天。会同时下发一组 <code>推送+消息</code> ，如果用户没有启动 QQ，虽有延迟但必然能够先收到 <code>推送</code>，在受到推送的提醒之后，用户打开 App，此时收到了离线 <code>消息</code>，即时更新 UI，与好友即时的发送/接收消息。（在收到推送后，断网，然后启动 App，你会发现此时手机里并不会显示刚刚推送的内容，因为它是依靠拉取消息来刷新页面的，而不是不够稳定的推送）</p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"附赠\"><a href=\"#附赠\" class=\"headerlink\" title=\"附赠\"></a>附赠</h1><hr>\n<p>极光推送 <code>所有 API</code> 调用 demo，download：<a href=\"https://github.com/pikacode/EBResources/blob/master/JPush%20demo/jpush-demo-wxc.zip\">JPush demo</a><br><img src=\"http://upload-images.jianshu.io/upload_images/1944178-6d81cf215f7f28cd.gif?imageMogr2/auto-orient/strip\" alt=\"demo.gif\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cisk6ki7s0007sbbdnp47iewr","category_id":"cisk6ki82000csbbdpczdal21","_id":"cisk6ki87000ksbbd6wfa4us9"},{"post_id":"cisk6ki7v0009sbbd380scppa","category_id":"cisk6ki82000csbbdpczdal21","_id":"cisk6ki89000rsbbd8ek22son"},{"post_id":"cisk6ki7d0002sbbd37uovizh","category_id":"cisk6ki7y000asbbdl0gltzq9","_id":"cisk6ki8a000xsbbda7zdl04y"},{"post_id":"cisk6ki7d0002sbbd37uovizh","category_id":"cisk6ki88000qsbbd1wyfa9uc","_id":"cisk6ki8b0010sbbdam10vzlh"},{"post_id":"cisk6ki7p0006sbbdm0eu14y0","category_id":"cisk6ki82000csbbdpczdal21","_id":"cisk6ki8c0011sbbdwqb8r5gh"},{"post_id":"cisk6ki7p0006sbbdm0eu14y0","category_id":"cisk6ki89000tsbbdv3bfy9t4","_id":"cisk6ki8c0013sbbdz2r2izzc"},{"post_id":"cisk6ki750000sbbdv0t752nj","category_id":"cisk6ki7o0005sbbdbg73hn16","_id":"cisk6ki8d0014sbbdpcdm651f"},{"post_id":"cisk6ki750000sbbdv0t752nj","category_id":"cisk6ki86000isbbd18vnffgs","_id":"cisk6ki8d0015sbbd5xmt4hmv"},{"post_id":"cisk6ki750000sbbdv0t752nj","category_id":"cisk6ki8b000ysbbdeu8qf26x","_id":"cisk6ki8d0016sbbdkgbipa2q"}],"PostTag":[{"post_id":"cisk6ki750000sbbdv0t752nj","tag_id":"cisk6ki7j0004sbbdm8qkwfs9","_id":"cisk6ki85000fsbbda5d9wc8l"},{"post_id":"cisk6ki750000sbbdv0t752nj","tag_id":"cisk6ki7v0008sbbdcd2twf9p","_id":"cisk6ki85000gsbbdz9wj3dwk"},{"post_id":"cisk6ki750000sbbdv0t752nj","tag_id":"cisk6ki81000bsbbd7tjz1zl3","_id":"cisk6ki86000jsbbdgsz9grdu"},{"post_id":"cisk6ki7d0002sbbd37uovizh","tag_id":"cisk6ki7v0008sbbdcd2twf9p","_id":"cisk6ki88000nsbbdzdcbtch7"},{"post_id":"cisk6ki7d0002sbbd37uovizh","tag_id":"cisk6ki81000bsbbd7tjz1zl3","_id":"cisk6ki88000osbbdsglvj6fe"},{"post_id":"cisk6ki7p0006sbbdm0eu14y0","tag_id":"cisk6ki81000bsbbd7tjz1zl3","_id":"cisk6ki8a000usbbdzx9p0qy1"},{"post_id":"cisk6ki7p0006sbbdm0eu14y0","tag_id":"cisk6ki88000psbbdca9nu8p1","_id":"cisk6ki8a000vsbbdzdbe67nt"},{"post_id":"cisk6ki7s0007sbbdnp47iewr","tag_id":"cisk6ki81000bsbbd7tjz1zl3","_id":"cisk6ki8b000zsbbdyucypy8o"},{"post_id":"cisk6ki7v0009sbbd380scppa","tag_id":"cisk6ki81000bsbbd7tjz1zl3","_id":"cisk6ki8c0012sbbdok1lzp7r"}],"Tag":[{"name":"HBuilder","_id":"cisk6ki7j0004sbbdm8qkwfs9"},{"name":"JPush","_id":"cisk6ki7v0008sbbdcd2twf9p"},{"name":"Push Notification","_id":"cisk6ki81000bsbbd7tjz1zl3"},{"name":"iOS 10","_id":"cisk6ki88000psbbdca9nu8p1"}]}}